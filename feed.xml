<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>gorpeln的个人博客 - gorpeln</title>
    <link>https://gorpeln.top</link>
    <description>记录技术上的成长以及生活里的点点滴滴...</description>
    
      <item>
        <title>外链跳转到中间页</title>
        <link>https://gorpeln.top/article/17094338798</link>
        <guid isPermaLink="true">https://gorpeln.top/article/17094338798</guid>
        <pubDate>2024-03-03</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20240303104439913.png!gorpeln&quot; alt=&quot;20240303104439913&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;
&lt;p&gt;网络安全的问题这些年越来越被关注，所以各大平台网站例如微博、微信、QQ、网易等，都在这几年为自家的网络产品添加了一个安全跳转的中台页面，甚至微博对于跳转链接必须是企业认证才能进入微博的安全白名单，可以说是把安全做到了&lt;del&gt;&lt;strong&gt;极致&lt;/strong&gt;&lt;/del&gt;。&lt;/p&gt;

&lt;p&gt;加了安全跳转中台以后，这样可以让自己的产品主域名成功与外链间接通过中台串联，而不是直接关系，增加安全跳转中台页面也间接提升了网络产品的用户体验。&lt;/p&gt;

&lt;h3 id=&quot;操作&quot;&gt;操作&lt;/h3&gt;
&lt;p&gt;新建 js 文件，如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;safe.js&lt;/code&gt;。里面的网址为排除跳转中间页。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function checkParent(element, classNames) {
    while (element) {
        if (element.classList &amp;amp;&amp;amp; classNames.some(cn =&amp;gt; element.classList.contains(cn))) {
            return true;
        }
        element = element.parentElement;
    }
    return false;
}
var excludedClasses = [&apos;card-link&apos;, &apos;friend-item&apos;, &apos;contact-item&apos;, &apos;footer-item&apos;]; // 添加需要排除的a标签类名class
window.addEventListener(&apos;load&apos;, (event) =&amp;gt; {
    document.body.addEventListener(&apos;click&apos;, function(e) {
        let target = e.target;
        while (target &amp;amp;&amp;amp; target.nodeName !== &apos;A&apos;) {
            target = target.parentNode;
        }
        if (target &amp;amp;&amp;amp; target.nodeName === &apos;A&apos; &amp;amp;&amp;amp;
            !checkParent(target, excludedClasses) &amp;amp;&amp;amp;
            !target.href.includes(&apos;gorpeln.top&apos;) &amp;amp;&amp;amp;
            !target.href.includes(&apos;gorpeln.eu.org&apos;) &amp;amp;&amp;amp;
            !target.href.includes(&apos;lab.gorpeln.top&apos;) &amp;amp;&amp;amp;
            !target.href.includes(&apos;github.com&apos;) &amp;amp;&amp;amp;
            target.hostname !== window.location.hostname) {
            e.preventDefault();
            let encodedUrl = btoa(target.href); // Base64 encode the URL
            let url = &apos;/go-wild?target=&apos; + encodedUrl;
            window.open(url, &apos;_blank&apos;);
        }
    });
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;新建一个 html，如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-wild.html&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div class=&quot;tiaozhuan-all&quot;&amp;gt;
    &amp;lt;div class=&quot;tiaozhuan-nrong&quot;&amp;gt;
        &amp;lt;div class=&quot;tiaozhuan-title&quot;&amp;gt;即将离开 『 gorpeln&apos;s Blog 』 ，跳转到以下外部链接&amp;lt;/div&amp;gt;
        &amp;lt;div id=&quot;tiaozhuan-link&quot;&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;tiaozhuan-info&quot;&amp;gt;请自行识别该链接是否安全，并保管好个人信息。&amp;lt;/div&amp;gt;
        &amp;lt;div class=&quot;tiaozhuan-button&quot;&amp;gt;&amp;lt;a href=&apos;&apos; id=&apos;direct-link&apos;&amp;gt;继续访问&amp;lt;/a&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    const params = new URLSearchParams(window.location.search);
    const encodedTarget = params.get(&apos;target&apos;);
    const target = atob(encodedTarget); // 使用 atob 进行 Base64 解码

    if (target) {
        document.getElementById(&apos;direct-link&apos;).href = target;
        document.getElementById(&apos;tiaozhuan-link&apos;).textContent = &apos;&apos; + target; // 直接显示目标地址    
    } else {
        console.error(&apos;未指定重定向目标。&apos;);
    }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;相关 css，根据主题风格调整。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;body {
    background: #ececec;
}

.tiaozhuan-all {
    position: relative;
    box-shadow: rgba(0, 0, 0, 0.25) 0px 25px 50px -10px;
    border-radius: 10px;
    background: #fff url(../assets/img/go-wild.png) no-repeat center center / cover;
    color: #666;
    word-break: break-all;
    max-width: 700px;
    height: 350px;
    text-align: center;
    font-size: 0.85rem;
    overflow: hidden;
    margin: 100px auto 0;

    @include breakpoint(&apos;small&apos;) {
        aspect-ratio: 2 / 1;
        height: auto;
    }
}

.tiaozhuan-nrong {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 20px 20px 30px 20px;
}

.tiaozhuan-title {
    font-size: 1.3rem;
    color: #222;
    line-height: 1.4;
    margin-bottom: 4px;
}

.tiaozhuan-info {
    margin-top: 6px;
}

.tiaozhuan-button {
    margin-top: 20px;
}

.tiaozhuan-button a {
    color: #fc9151;
    border-radius: 4px;
    padding: 10px 30px;
    font-size: .85rem;
    border: 0.5px solid #fc9151;
    display: inline-block;
    text-decoration: none;

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后在页尾引用js文件即可，如&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script src=&quot;/js/safe.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;思路&quot;&gt;思路&lt;/h3&gt;
&lt;p&gt;js文件识别链接的a标签，并把链接用 base64 编码，同时排除一些不需要跳转中间页的class或网站。然后跳转到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-wild.html&lt;/code&gt;文件中（链接格式为/go-wild?target=base64编码），html文件承担了中间页具体信息，及跳转动作。如使用base64解码跳转的链接。&lt;/p&gt;

&lt;h3 id=&quot;结语&quot;&gt;结语&lt;/h3&gt;
&lt;p&gt;对于浏览体验来说，多了一步跳转，总归是不好，但为了愉快的玩耍博客，稳妥一点更佳。如果觉得跳转中间页很烦人，浏览器可以装个 &lt;a href=&quot;https://chromewebstore.google.com/detail/skip-redirect/jaoafjdoijdconemdmodhbfpianehlon&quot;&gt;Skip Redirect&lt;/a&gt; 插件，告别所有网站的中间页跳转，直接抵达目标地址。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div style=&quot;color: #888888;font-weight: 300;font-size:12px;margin-top:10px;&quot;&gt;参考链接：
    &lt;div&gt;
        https://koobai.com/zhongjiantiaozhuan
    &lt;/div&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>GitHub贡献者可获取 Stark 空投</title>
        <link>https://gorpeln.top/article/17087779433</link>
        <guid isPermaLink="true">https://gorpeln.top/article/17087779433</guid>
        <pubDate>2024-02-24</pubDate>
        <description>&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Starknet&lt;/code&gt; 正在向给 Github 按 star 排前 5000 个 repo 贡献过代码的人发钱，可以领领看。仔细研究了一下，最终我也拿到了这笔意外之财。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20240224203223424.jpg!gorpeln&quot; alt=&quot;20240224203223424&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;领取条件&quot;&gt;领取条件&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;在 2023 年 11 月 15 日之前，您至少向全球星数排名前 5,000 位的版本库提交了三次内容。其中至少一次提交发生在 2018 年或之后。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即使不符合条件也先不要气馁，可以试着查一下资格，因为这 5000 个仓库的范围比较迷，我甚至都不记得自己是给哪个仓库贡献达标的……&lt;/p&gt;

&lt;p&gt;打开 &lt;a href=&quot;https://provisions.starknet.io&quot;&gt;provisions.starknet.io&lt;/a&gt;，点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eligibility check only&lt;/code&gt;，选择 GitHub，输入 GitHub 用户名，点击 Go，如果提示 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Congratulations&lt;/code&gt;，那你就可以领到这笔钱了。&lt;/p&gt;

&lt;p&gt;接着点击 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Disconnect&lt;/code&gt;，点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Claim STRK&lt;/code&gt;，按步骤下载浏览器插件（选哪个都可以，我选择的是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Argent X&lt;/code&gt;），创建一个钱包地址，在核验资格的步骤选择最后一个 GitHub，授权 GitHub 账号，然后这笔钱就到自己的钱包里了，不知道各位都领了多少，我领到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;111.1&lt;/code&gt;。大约 1~2 分钟检查钱包到账情况。&lt;/p&gt;

&lt;h3 id=&quot;提现&quot;&gt;提现&lt;/h3&gt;
&lt;p&gt;接下来提现到支付宝。由于我国的加密货币政策原因，提现一定要选择安全正规的大平台进行，提现的大致过程如下&lt;/p&gt;

&lt;blockquote class=&quot;prompt-danger&quot;&gt;
  &lt;p&gt;提醒！ &lt;br /&gt;
此教程仅提供大致的加密货币提现方法，用于国内优秀开源贡献者兑换奖金。参与加密货币交易违反国内政策，投资须谨慎，加密货币风险高，请不要参与炒币，场外交易有刑事风险！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;申请交易所账号：我用的是 &lt;a href=&quot;https://www.okx.com/cn&quot;&gt;欧易&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下载 APP 进行实名认证：有实名认证的交易所能更大程度确保资金来源安全&lt;/li&gt;
  &lt;li&gt;充币：币种选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRK&lt;/code&gt;，充至交易账户，打开钱包按步骤将币转入欧易提供的地址内，等待 5~10 分钟到账&lt;/li&gt;
  &lt;li&gt;卖出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STRK&lt;/code&gt; 获得 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USDT&lt;/code&gt;：前往 STRK/USDT 的交易页面选择卖出，挂单，选市价委托（设置一个合理的限价也可以），数量 100%，等成交&lt;/li&gt;
  &lt;li&gt;提币：卖完到资产页面，把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;USDT&lt;/code&gt; 余额从交易账户转到资金账户，点提币，C2C 交易，支付方式推荐选支付宝，选一个成交量比较高的靠谱的买家，填写支付宝账户并上传支付宝收款码，将 USDT 全部出售，1~20 分钟后即可到账，确认到账金额、付款方姓名正确后，回到交易所页面确认收款，交易完成&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;prompt-danger&quot;&gt;
  &lt;p&gt;最后再次提醒！ &lt;br /&gt;
此教程仅提供大致的加密货币提现方法，用于国内优秀开源贡献者兑换奖金。参与加密货币交易违反国内政策，投资须谨慎，加密货币风险高，请不要参与炒币，场外交易有刑事风险！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;结语&quot;&gt;结语&lt;/h3&gt;
&lt;p&gt;感谢那些一直默默付出的贡献者们，这次空投给开源社区打了一剂振奋剂，也引来了不少别出心裁之人……
还有一些开源项目表示自己收到了许多垃圾 PR，或许是一些人希望借此抢下一次的空投。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>部署友链朋友圈</title>
        <link>https://gorpeln.top/article/17049566482</link>
        <guid isPermaLink="true">https://gorpeln.top/article/17049566482</guid>
        <pubDate>2024-01-11</pubDate>
        <description>&lt;h3 id=&quot;在线预览&quot;&gt;在线预览：&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;/friends&quot;&gt;https://gorpeln.top/friends&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;github部署爬虫&quot;&gt;Github部署爬虫&lt;/h3&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://fcircle-doc.yyyzyyyz.cn/&quot;&gt;https://fcircle-doc.yyyzyyyz.cn/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;首先，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fork&lt;/code&gt;此项目 &lt;a href=&quot;https://github.com/Rock-Candy-Tea/hexo-circle-of-friends&quot;&gt;https://github.com/Rock-Candy-Tea/hexo-circle-of-friends&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编辑&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hexo_circle_of_friend/fc_settings.yaml&lt;/code&gt;文件。根据注释，修改此处配置&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LINK: [
     { link: &quot;https://gorpeln.top/links/&quot;, theme: &quot;commen2&quot; },  
     # 友链页地址，修改为你的友链页地址以及相应的主题，若无相应主题，尝试commen1或commen2。
     ...
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;针对还未适配主题或者有定制需求的用户，可以开启&lt;strong&gt;配置项友链&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SETTINGS_FRIENDS_LINKS: {
    enable: true,
    json_api: &quot;https://xxxx.com/xxx.json&quot;,
    # json_api：通过json格式配置友链，详见：https://fcircle-doc.yyyzyyyz.cn/#/developmentdoc?id=配置项json友链
    list: []
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后点击仓库的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;–&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Secrets&lt;/code&gt;–&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New repository secret&lt;/code&gt;，添加4个变量。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_NAME&lt;/code&gt;(Github用户名)、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_EMAIL&lt;/code&gt;(Github账户邮箱)、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_TOKEN&lt;/code&gt;(Github密钥，具有repo以及workflow权限)、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;STORAGE_TYPE&lt;/code&gt;(数据库类型，填写sqlite)&lt;/p&gt;

&lt;p&gt;完成后，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;–&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General&lt;/code&gt;，勾选&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;permissions&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Allow all actions and reusable workflows&lt;/code&gt;以及&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Workflow permissions&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Read and write permissions&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;vercel部署api&quot;&gt;Vercel部署API&lt;/h3&gt;
&lt;p&gt;新建项目，导入仓库，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;等自动部署完成后，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;–&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment Variables&lt;/code&gt;，添加4个变量，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_NAME&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_EMAIL&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GH_TOKEN&lt;/code&gt;（同上），还需添加&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VERCEL_ACCESS_TOKEN&lt;/code&gt;(&lt;strong&gt;Vercel&lt;/strong&gt;—&amp;gt;&lt;strong&gt;Settings&lt;/strong&gt;—&amp;gt;&lt;strong&gt;Tokens&lt;/strong&gt;—&amp;gt;&lt;strong&gt;Create&lt;/strong&gt;)。&lt;/p&gt;

&lt;h3 id=&quot;运行爬虫&quot;&gt;运行爬虫&lt;/h3&gt;
&lt;p&gt;回到Github仓库，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Actions&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-friends-posts&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Enable workflow&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run workflow&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Run workflow&lt;/code&gt;。爬虫会自动爬取文章，同时Vercel会自动重新部署。&lt;/p&gt;

&lt;h3 id=&quot;绑定域名&quot;&gt;绑定域名&lt;/h3&gt;
&lt;p&gt;vercel遭遇域名污染导致无法访问，友链朋友圈的vercel部署也会受到影响，可以通过解析到自定义域名来解决。&lt;/p&gt;

&lt;p&gt;来到Vercel项目，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt;—&amp;gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Domains&lt;/code&gt;，根据提示输入域名并设置DNS即可。&lt;/p&gt;

&lt;p&gt;在链接后加上&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/all&lt;/code&gt;获取全部文章&lt;/p&gt;

&lt;h3 id=&quot;挂载前端代码&quot;&gt;挂载前端代码&lt;/h3&gt;
&lt;p&gt;博客新建一个页面，放入以下代码： &lt;br /&gt;
其中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apiurl&lt;/code&gt;就上在vercel上部署绑定的域名&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!-- 挂载友链朋友圈的容器 --&amp;gt;
&amp;lt;div id=&quot;cf-container&quot;&amp;gt;与主机通讯中……&amp;lt;/div&amp;gt;
&amp;lt;!-- 加样式和功能代码 --&amp;gt;
&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://fastly.jsdelivr.net/gh/lmm214/immmmm/themes/hello-friend/static/fcircle-beta.css&quot;&amp;gt;
&amp;lt;!-- 匹配自己的友链或加载后端数据 --&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
  var fdataUser = {
    //jsonurl: &apos;https://cdn.edui.fun/lmm.json&apos;,  //【推荐】json 匹配模式
    apiurl: &apos;https://hexo-circle-of-friends-lmm214.vercel.app/&apos;,  //自部署api
  }
&amp;lt;/script&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://fastly.jsdelivr.net/gh/lmm214/immmmm/themes/hello-friend/static/fcircle-beta.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;div style=&quot;color: #888888;font-weight: 300;font-size:12px;margin-top:10px;&quot;&gt;参考链接：
    &lt;div&gt;
        https://blog.stevenw.cc/archives/BMn51E3Y
        &lt;br /&gt;
        https://immmmm.com/hi-friends-circle
    &lt;/div&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>2023 年度总结</title>
        <link>https://gorpeln.top/article/17040105944</link>
        <guid isPermaLink="true">https://gorpeln.top/article/17040105944</guid>
        <pubDate>2023-12-31</pubDate>
        <description>&lt;p style=&quot;display:none&quot;&gt;在辞旧迎新之际，回首2023年，我感慨万千。岁月如梭，光阴荏苒，每一天都是一段珍贵的时光，我努力在工作与生活的交错中寻找平衡，不断追求进步与成长。工作上，我面对各种挑战，不断突破自我，努力为团队和公司做出更大的贡献；生活中，我珍惜每一个温暖的瞬间，注重身心健康，与家人朋友共享美好时光。&lt;/p&gt;

&lt;p style=&quot;display:none&quot;&gt;在未来的道路上，我愿继续前行，怀揣着对生活的热爱和对未来的期许，不断探索前进，追逐梦想。感恩过去一年的所有经历和收获，期待着新的一年带来更多的挑战与机遇，也希望能与您一同分享成长的喜悦与收获。&lt;/p&gt;

&lt;h3 id=&quot;文雅&quot;&gt;文雅&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;度过了一年平静而充实的生活，专注于内心的宁静与成长。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20231231161634712.png!gorpeln&quot; alt=&quot;20231231161634712&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;通俗&quot;&gt;通俗&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;苟活着，一年啥也没干。&lt;/strong&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20231231161634713.png!gorpeln&quot; alt=&quot;20231231161634713&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>博客黑夜模式：Dark Reader 插件</title>
        <link>https://gorpeln.top/article/17016025546</link>
        <guid isPermaLink="true">https://gorpeln.top/article/17016025546</guid>
        <pubDate>2023-12-03</pubDate>
        <description>&lt;p&gt;亲爱的读者，现在你可以更加自由地调整我们的博客浏览模式了！如果你喜欢在夜晚或低光环境下浏览，我们建议你使用 &lt;strong&gt;Chrome&lt;/strong&gt; 浏览器，并安装 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dark Reader&lt;/code&gt; 插件。这个插件简单易用，适用于各类网站，包括我们的博客。启用黑夜模式，不仅有助于减轻眼睛的疲劳，还能提供更加舒适的阅读环境。安装 Dark Reader 插件只需几步简单操作，快来尝试吧，让博客在黑夜中焕发新光彩！&lt;/p&gt;

&lt;h3 id=&quot;dark-reader-简介&quot;&gt;Dark Reader 简介&lt;/h3&gt;

&lt;p&gt;适用于所有网站的暗色主题。关爱眼睛，就使用 Dark Reader 进行日常浏览。&lt;/p&gt;

&lt;p&gt;这是一个护眼扩展程序，通过实时生成黑暗主题，为每一个网站启用夜间模式。 Dark Reader 反转明亮的颜色，使网页内容具有高对比度并易于在夜间阅读。&lt;/p&gt;

&lt;p&gt;您可以调整亮度、对比度，应用棕褐色滤镜、黑暗模式，设置字体和忽略的网站列表。&lt;/p&gt;

&lt;p&gt;我们可能会要求您通过捐款来支持应用程序的开发。您可能会在设置弹出窗口中看到有关 Dark Reader 的新闻。有针对经验丰富的用户的开发人员工具。&lt;/p&gt;

&lt;p&gt;Dark Reader 无广告，也不会向任何地方发送用户的数据。它完全开源 &lt;a href=&quot;https://github.com/darkreader/darkreader&quot;&gt;https://github.com/darkreader/darkreader&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;下载安装&quot;&gt;下载安装&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;插件下载地址：&lt;/strong&gt;&lt;a href=&quot;https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh&quot;&gt;https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开源地址：&lt;/strong&gt;&lt;a href=&quot;https://github.com/darkreader/darkreader&quot;&gt;https://github.com/darkreader/darkreader&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;蓝奏云：&lt;/strong&gt;&lt;a href=&quot;https://gorpeln.lanzoul.com/itV2o1gt1uve%0A&quot;&gt;https://gorpeln.lanzoul.com/itV2o1gt1uve&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安装方法：&lt;/strong&gt; &lt;br /&gt;
　　方法1. chrome插件商店下载直接安装   &lt;br /&gt;
　　方法2. 开源地址、蓝奏云下载的直接解压，在chrome浏览器输入栏输入&lt;strong&gt;chrome://extensions/&lt;/strong&gt;，开启开发者模式，点击&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;加载已解压的扩展程序&lt;/code&gt;&lt;/strong&gt;即可。
　　&lt;/p&gt;
&lt;h3 id=&quot;使用效果&quot;&gt;使用效果&lt;/h3&gt;
&lt;p&gt;Dark Reader 启用前
&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234541.png!gorpeln&quot; alt=&quot;20231203192234541&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dark Reader 启用后&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234542.png!gorpeln&quot; alt=&quot;20231203192234542&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234543.png!gorpeln&quot; alt=&quot;20231203192234543&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用方法&quot;&gt;使用方法&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234544.png!gorpeln&quot; alt=&quot;20231203192234544&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234545.png!gorpeln&quot; alt=&quot;20231203192234545&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234546.png!gorpeln&quot; alt=&quot;20231203192234546&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20231203192234547.png!gorpeln&quot; alt=&quot;20231203192234547&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>个性二维码合集</title>
        <link>https://gorpeln.top/article/16990919984</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16990919984</guid>
        <pubDate>2023-11-04</pubDate>
        <description>&lt;p&gt;探索个性二维码，每个都是数字艺术的小宝藏。这些小图案背后蕴含着独特的故事。扫一扫，用手机开启一场别样的冒险，发现属于你的精彩故事。或许，在其中的某一张，你将找到属于自己的独特之旅。数字艺术的魅力，从这些个性十足的二维码开始。让它们为你的日常生活注入新奇，感受创意的奇妙。快来和我一同探索这个数字世界的神秘角落吧！&lt;/p&gt;

&lt;html lang=&quot;zh&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;style&gt;
        .slideshow-container {
            max-width: 500px;
            position: relative;
            margin: auto;
        }

        .mySlides {
            display: none;
        }

        .prev, .next {
            position: absolute;
            top: 50%;
            width: auto;
            padding: 16px;
            margin-top: -22px;
            color: white;
            font-weight: bold;
            font-size: 18px;
            transition: 0.6s ease;
            border-radius: 0 3px 3px 0;
            cursor: pointer;
            background-color: rgba(0, 0, 0, 0.8);
        }

        .next {
            right: 0;
            border-radius: 3px 0 0 3px;
        }

        .prev:hover, .next:hover {
            background-color: rgba(0, 0, 0, 1);
        }

    .thumbnail-container {
        text-align: center;
        margin-top: 20px;
        display: flex;
        flex-wrap: wrap; /* 开启自动换行 */
        justify-content: center; /* 让缩略图水平居中 */
    }

    .thumbnail {
        width: 60px;
        height: 60px;
        margin: 5px; /* 调整缩略图之间的间距 */
        cursor: pointer;
    }

    .thumbnail.active {
        border: 2px solid #333; /* 激活状态添加边框 */
    }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;!-- 添加更多的图片 --&gt;
&lt;div class=&quot;slideshow-container&quot;&gt;

	&lt;script&gt;
 		for (var i = 1; i &lt; 15; i++) {
            document.write(&quot;&lt;div class=&apos;mySlides&apos;&gt;&lt;img src=&apos;https://img.gorpeln.top/p/qrcode_&quot; + i + &quot;.jpg&apos; style=&apos;width:100%&apos;&gt;&lt;/div&gt;&quot;);       
        }
	&lt;/script&gt;


    &lt;a class=&quot;prev&quot; onclick=&quot;plusSlides(-1)&quot;&gt;&amp;#10094;&lt;/a&gt;
    &lt;a class=&quot;next&quot; onclick=&quot;plusSlides(1)&quot;&gt;&amp;#10095;&lt;/a&gt;
&lt;/div&gt;

&lt;!-- 添加更多的缩略图 --&gt;
&lt;div class=&quot;thumbnail-container&quot;&gt;

    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_1.jpg&quot; onclick=&quot;currentSlide(1)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_2.jpg&quot; onclick=&quot;currentSlide(2)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_3.jpg&quot; onclick=&quot;currentSlide(3)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_4.jpg&quot; onclick=&quot;currentSlide(4)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_5.jpg&quot; onclick=&quot;currentSlide(5)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_6.jpg&quot; onclick=&quot;currentSlide(6)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_7.jpg&quot; onclick=&quot;currentSlide(7)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_8.jpg&quot; onclick=&quot;currentSlide(8)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_9.jpg&quot; onclick=&quot;currentSlide(9)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_10.jpg&quot; onclick=&quot;currentSlide(10)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_11.jpg&quot; onclick=&quot;currentSlide(11)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_12.jpg&quot; onclick=&quot;currentSlide(12)&quot; /&gt;
  	&lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_13.jpg&quot; onclick=&quot;currentSlide(13)&quot; /&gt;
    &lt;img class=&quot;thumbnail&quot; src=&quot;https://img.gorpeln.top/p/qrcode_14.jpg&quot; onclick=&quot;currentSlide(14)&quot; /&gt;

&lt;/div&gt;

&lt;script&gt;
    let slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) {
        showSlides(slideIndex += n);
    }

    function currentSlide(n) {
        showSlides(slideIndex = n);
    }

    function showSlides(n) {
        let i;
        let slides = document.getElementsByClassName(&quot;mySlides&quot;);
        let thumbnails = document.getElementsByClassName(&quot;thumbnail&quot;);

        if (n &gt; slides.length) {
            slideIndex = 1;
        }

        if (n &lt; 1) {
            slideIndex = slides.length;
        }

        for (i = 0; i &lt; slides.length; i++) {
            slides[i].style.display = &quot;none&quot;;
        }

        for (i = 0; i &lt; thumbnails.length; i++) {
            thumbnails[i].classList.remove(&quot;active&quot;);
        }

        slides[slideIndex - 1].style.display = &quot;block&quot;;
        thumbnails[slideIndex - 1].classList.add(&quot;active&quot;);
    }
&lt;/script&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;/body&gt;
&lt;/html&gt;
</description>
      </item>
    
      <item>
        <title>Sublime Text 常用插件</title>
        <link>https://gorpeln.top/article/16962230954</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16962230954</guid>
        <pubDate>2023-10-02</pubDate>
        <description>&lt;h4 id=&quot;一package-control无法使用解决办法&quot;&gt;一、Package Control无法使用解决办法&lt;/h4&gt;

&lt;p&gt;最新升级了MacOS到Ventura和Sonoma,发现安装Sublime Text4之后，无法使用Install Package Control，即使安装了Install Package Control也无法正常使用Install Pakcage。&lt;/p&gt;

&lt;p&gt;解决方法：&lt;/p&gt;

&lt;p&gt;下载：&lt;a href=&quot;https://github.com/wbond/package_control/releases&quot;&gt;PackageControl&lt;/a&gt; （https://github.com/wbond/package_control/releases）&lt;/p&gt;

&lt;p&gt;之后得到一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package.Control.sublime.package&lt;/code&gt;文件，将文件重命名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Control.sublime-package&lt;/code&gt;&lt;br /&gt;
随后将这个文件放置到插件安装目录的（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Installed Packages&lt;/code&gt;）目录下，路径为：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Users/用户名/Library/Application Support/Sublime Text/Installed Packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;二package-control使用方法&quot;&gt;二、Package Control使用方法&lt;/h4&gt;

&lt;p&gt;为插件管理包，通过快捷键 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl + Shift + P&lt;/code&gt;
打开，之后可以很方便的浏览、安装和卸载 Sublime Text 中的插件。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;插件安装：输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install&lt;/code&gt; &lt;br /&gt;
  后选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Control: Install Package&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;插件列表：输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list&lt;/code&gt; &lt;br /&gt;
  后选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Control: List Packages&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;插件删除：输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove&lt;/code&gt; &lt;br /&gt;
  后选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Package Control: Remove Packages&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;三常用插件&quot;&gt;三、常用插件：&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ChineseLocalization&lt;/code&gt; 汉化包&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ColorHelper&lt;/code&gt; 显示所选颜色值的颜色&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML-CSS-JS Prettify&lt;/code&gt; 一款集成了格式化（美化）html、css、js三种文件类型的插件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Auto Close HTML Tags&lt;/code&gt; 写HTML代码时，自动补全闭合标签&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BracketHighlighter&lt;/code&gt; 代码匹配，可以匹配括号，引号等符号内的范围&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alignment&lt;/code&gt; 使多行代码中的等号对齐&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AutoFileName&lt;/code&gt; 快捷输入文件名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SublimeCodeInte&lt;/code&gt; 代码提示、补全&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SublimeLinter&lt;/code&gt; 代码检查的功能&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;View In Browser&lt;/code&gt; Sublime Text 保存后网页自动同步更新&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LiveReload&lt;/code&gt; 调试网页实时自动更新&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>博客评论时一键填写自己的信息</title>
        <link>https://gorpeln.top/article/16959932733</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16959932733</guid>
        <pubDate>2023-09-29</pubDate>
        <description>&lt;p&gt;使用浏览器书签实现博客网站留言评论时&lt;strong&gt;一键填写昵称/邮箱/网址&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;具体的使用方法：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将本页添加到收藏夹保存为书签；&lt;/li&gt;
  &lt;li&gt;右键刚刚创建的书签，选择“编辑”或“属性”；&lt;/li&gt;
  &lt;li&gt;将“名称”一栏改为“一键填写留言评论信息”（见名知意即可，名称可换成其它的），并将“网址”或“地址”或“url”一栏原有的网址链接替换成上述 javascript 代码（代码里面的相关个人信息改为自己的哦~~），确定即可。&lt;/li&gt;
  &lt;li&gt;以后遇到留言评论时，点一个这个书签即可自动一键填写个人信息！&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript: void
function() {
    var lauthor = [&quot;#author&quot;,&quot;input[name=&apos;comname&apos;]&quot;,&quot;#inpName&quot;,&quot;input[name=&apos;author&apos;]&quot;,&quot;#ds-dialog-name&quot;,&quot;#name&quot;,&quot;input[name=&apos;nick&apos;]&quot;,&quot;#comment_author&quot;],
	lmail =[&quot;#mail&quot;,&quot;#email&quot;,&quot;input[name=&apos;commail&apos;]&quot;,&quot;#inpEmail&quot;,&quot;input[name=&apos;email&apos;]&quot;,&quot;#ds-dialog-email&quot;,&quot;input[name=&apos;mail&apos;]&quot;,&quot;#comment_email&quot;],
	lurl =[&quot;#url&quot;,&quot;input[name=&apos;comurl&apos;]&quot;,&quot;#inpHomePage&quot;,&quot;#ds-dialog-url&quot;,&quot;input[name=&apos;url&apos;]&quot;,&quot;input[name=&apos;website&apos;]&quot;,&quot;#website&quot;,&quot;input[name=&apos;link&apos;]&quot;,&quot;#comment_url&quot;];
    for (i = 0; i &amp;lt; lauthor.length; i++) {
        var author = document.querySelector(lauthor[i]);
        if (author != null) {
            author.value = &apos;你的昵称&apos;;
            author.dispatchEvent(new Event(&apos;input&apos;));
            author.dispatchEvent(new Event(&apos;change&apos;));
            break;
        }
    }
    for (j = 0; j &amp;lt; lmail.length; j++) {
        var mail = document.querySelector(lmail[j]);
        if (mail != null) {
            mail.value = &apos;你的邮箱&apos;;
            mail.dispatchEvent(new Event(&apos;input&apos;));
            mail.dispatchEvent(new Event(&apos;change&apos;));
            break;
        }
    }
    for (k = 0; k &amp;lt; lurl.length; k++) {
        var url = document.querySelector(lurl[k]);
        if (url != null) {
            url.value = &apos;你的网址&apos;;
            url.dispatchEvent(new Event(&apos;input&apos;));
            url.dispatchEvent(new Event(&apos;change&apos;));
            break;
        }
    }
    return ! 1;
} ()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>8周年：来自GPT的总结</title>
        <link>https://gorpeln.top/article/16927632006</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16927632006</guid>
        <pubDate>2023-08-23</pubDate>
        <description>&lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gorpeln的个人博客 - gorpeln&lt;/code&gt;&lt;/strong&gt; 博客&lt;strong&gt;八周年&lt;/strong&gt;了。&lt;br /&gt;
  &lt;br /&gt;
转眼间，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;八年&lt;/code&gt;的悠悠岁月已如同手中紧握的沙子，无声无息的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;流逝&lt;/code&gt;。&lt;br /&gt;
光阴似箭，日月如梭。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;时间&lt;/code&gt;像一匹飞驰的骏马，转眼间，从我们的身边&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;飞逝&lt;/code&gt;而去。&lt;br /&gt;
后来，南山的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;风&lt;/code&gt;吹散了谷堆，北海的水淹没了墓碑，多少事&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;沧海桑田&lt;/code&gt;，无数人来了又回。 &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;时间&lt;/code&gt;是一直藏在黑暗中的温柔的手，在你一出神一&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;恍惚&lt;/code&gt;之间，物走星移。&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;博 客 八 周 年 快 乐 ！&lt;/code&gt;&lt;/strong&gt; 
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20200823120000260.jpg!gorpeln&quot; alt=&quot;20200823120000260&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;&lt;br /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
使用GPT帮我总结一下八年时光：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;博客八周年了,记录技术上的成长以及生活里的点点滴滴...,写一个有纪念意义的文章，要求1000字&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;八年前，我创建了自己的博客，开始记录自己在技术和生活方面的点点滴滴。这八年来，我学到了很多东西，也经历了很多事情。在博客八周年这个特殊的时刻，我想写一篇有纪念意义的文章，回顾自己的成长历程，分享自己的心得和经验，以及表达感激之情。
  
在技术方面，我从最初的编程小白，到现在的技术专家，经历了很多挑战和困难。我记得当时学习编程的时候，遇到了很多问题，有时候甚至不知道该怎么下手。但是我从来没有放弃过，通过不断的学习和实践，我逐渐掌握了编程的基本技能，学会了如何解决问题。在这个过程中，我也遇到了很多优秀的开发者和导师，他们给了我很多帮助和支持，让我能够更快地成长。
  
除了技术方面的成长，我也分享了自己生活中的点滴。我喜欢旅行、阅读、美食等等，这些都成为了我生活中的重要组成部分。我在博客中分享了自己的旅行经历、阅读心得、美食体验等等，这些内容不仅让读者更好地了解我的生活和思想，也让我的博客更加丰富多彩。
  
在这八年中，我也遇到了很多挑战和困难。有时候我会感到迷茫和无助，但是我从来没有放弃过，我相信只要坚持不懈，总会迎来成功的一天。在这个过程中，我也得到了很多人的支持和帮助，我想感谢他们，因为没有他们的支持，我可能无法走到今天的位置。
  
最后，我想展望一下未来。我相信技术的发展会给我们带来更多的机遇和挑战，我也会继续学习和成长，不断提高自己的技能。同时，我也希望能够继续分享自己的经验和心得，为其他开发者提供帮助和支持。我相信只要坚持不懈，我们都能够实现自己的梦想。
  
八年的博客生涯，让我学到了很多东西，也让我成长了很多。我想感谢所有读者、支持者、合作伙伴以及家人朋友，因为没有你们的支持，我无法走到今天的位置。同时，我也希望我的博客能够继续发展壮大，为更多人提供帮助和支持。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;博客八周年了,记录技术上的成长以及生活里的点点滴滴...,写一个有纪念意义的文章，要求5000字&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;很高兴能够在这个特殊的时刻，写一篇有纪念意义的文章，记录自己八年来的成长历程和生活点滴。在这篇文章中，我将分享更多的心得和经验，希望能够为读者提供更多的帮助和启示。
  
第一部分：技术成长历程
  
回顾自己的技术成长历程，我想从最初学习编程的经历开始说起。当时我还是一名大学生，对计算机编程一窍不通。但是我对计算机科学非常感兴趣，所以我决定学习编程。我选择了一门编程语言，开始学习。刚开始的时候，我遇到了很多问题，有时候甚至不知道该怎么下手。但是我从来没有放弃过，我相信只要坚持不懈，总会迎来成功的一天。
  
通过不断的学习和实践，我逐渐掌握了编程的基本技能，学会了如何解决问题。我开始写一些简单的程序，例如计算器、猜数字游戏等等。这些小程序虽然很简单，但是对于我来说却是一个很大的进步。我开始感到自己的编程能力在不断提高。
  
随着时间的推移，我开始接触到更加复杂的编程项目。我参加了一些编程比赛，这些比赛让我更加深入地了解了编程的本质。我开始学习数据结构、算法等高级编程技术，这些技术让我能够写出更加高效、优美的代码。
  
在这个过程中，我也遇到了很多优秀的开发者和导师，他们给了我很多帮助和支持，让我能够更快地成长。我参加了一些编程社区和开发者论坛，与其他开发者交流经验和技巧。这些经验和技巧让我受益匪浅，让我能够更好地应对各种编程问题。
  
现在，我已经成为了一名技术专家，拥有了丰富的编程经验和技能。我参与了很多大型项目，包括网站开发、移动应用开发、人工智能等等。我也成为了一名导师，帮助其他开发者提高自己的技能。我相信只要坚持不懈，我们都能够实现自己的梦想。
   
第二部分：生活点滴
   
除了技术方面的成长，我也分享了自己生活中的点滴。我喜欢旅行、阅读、美食等等，这些都成为了我生活中的重要组成部分。我在博客中分享了自己的旅行经历、阅读心得、美食体验等等，这些内容不仅让读者更好地了解我的生活和思想，也让我的博客更加丰富多彩。
  
我记得有一次，我去了一家很有名的餐厅，品尝了一道非常美味的菜肴。我在博客中分享了这个经历，还写了一篇关于这道菜肴的文章。很多读者看完我的文章后，也去了这家餐厅品尝这道菜肴，他们也非常喜欢这道菜肴。这让我感到非常开心，因为我能够为读者带来一些美好的体验。
  
我还喜欢阅读，我读了很多好书，例如《活着》、《百年孤独》等等。这些书籍让我更好地了解了人性和生命的意义。我在博客中分享了自己的阅读心得，希望能够激发读者对阅读的兴趣。
  
我也喜欢旅行，我去过很多不同的地方，例如欧洲、亚洲、北美等等。每个地方都有自己独特的文化和风景，让我感到非常惊奇和兴奋。我在博客中分享了自己的旅行经历，希望能够激发读者对旅行的兴趣。
  
第三部分：心得和经验
  
在这八年中，我积累了很多心得和经验，我想分享一些给读者。
  
首先，我认为学习是一件非常重要的事情。只有不断学习，我们才能够保持竞争力，不断提高自己的技能。我们应该保持好奇心，不断探索新的领域和技术。
  
其次，我认为实践是学习的关键。只有通过实践，我们才能够真正掌握知识和技能。我们应该多写代码，多参与项目，不断提高自己的实践能力。
  
第三，我认为交流是非常重要的。我们应该与其他开发者交流经验和技巧，学习他们的经验和技巧。我们也应该与其他人分享自己的经验和技巧，帮助他们提高自己的技能。
  
第四，我认为坚持不懈是成功的关键。在学习和实践的过程中，我们会遇到很多挑战和困难。但是只要坚持不懈，我们总会迎来成功的一天。我们应该相信自己，相信自己的能力。
  
第五，我认为分享是非常重要的。我们应该分享自己的经验和技巧，帮助其他人提高自己的技能。我们也应该分享自己的生活点滴，让其他人更好地了解我们的生活和思想。
  
第四部分：表达感激之情
  
在博客八周年这个特殊的时刻，我想表达自己的感激之情。首先，我要感谢所有读者，因为有你们的支持，我的博客才能够发展壮大。我也要感谢所有支持者和合作伙伴，因为有你们的帮助，我才能够走到今天的位置。最后，我要感谢我的家人和朋友，因为有你们的支持和鼓励，我才能够坚持不懈，追求自己的梦想。
  
结语
  
在这篇文章中，我回顾了自己在技术和生活方面的成长历程，分享了自己的心得和经验，表达了自己的感激之情。我相信只要坚持不懈，我们都能够实现自己的梦想。我也希望我的博客能够继续发展壮大，为更多人提供帮助和支持。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>同一台电脑上使用多个GitHub账号</title>
        <link>https://gorpeln.top/article/16895899334</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16895899334</guid>
        <pubDate>2023-07-17</pubDate>
        <description>&lt;h3 id=&quot;使用需求&quot;&gt;使用需求&lt;/h3&gt;

&lt;blockquote class=&quot;prompt-info&quot;&gt;
  &lt;p&gt;通常情况下，我们会有两个 github 账号：一个是公司的，另一个是私人的。由于 github 是使用 SSH key 的 fingerprint (对应的公钥id_rsa_pub)来判定你是哪个账户，而不是通过用户名，如果是在多台电脑上使用一个账号，可以为该账号添加多个 SSH key，如果是一台电脑使用多个账号，则分别生成多个 SSH key 添加到对应的账户即可。所以本文要实现的是公号和私号在 git 上同时使用，两者互不干扰。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;步骤一生成多个-ssh-key&quot;&gt;步骤一：生成多个 SSH key&lt;/h3&gt;
&lt;p&gt;为了举例方便，这里使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;one&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;two&lt;/code&gt; 两个账户。
使用cd ~/.ssh切换工作目录，然后使用如下命令生成两个钥匙，中间一路回车。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -f ~/.ssh/id_rsa_one -C &quot;one@xxx.com&quot;
ssh-keygen -t rsa -f ~/.ssh/id_rsa_two -C &quot;two@xxx.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样会在~/.ssh目录下生成四个文件：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id_rsa.one      //账号 one 的私钥
id_rsa.one.pub  //账号 one 的公钥
id_rsa.two
id_rsa.two.pub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;步骤二创建配置文件-config&quot;&gt;步骤二：创建配置文件 config&lt;/h3&gt;
&lt;p&gt;在 ~/.ssh目录下新建 config 文件，令不同 Host 实际映射到同一 HostName，但密钥文件不同。根据自己情况修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-one&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-name&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-two&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;accountTwo-name&lt;/code&gt;的值。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# --- 第一个账号 ---
Host account-one    # 如：gorpeln
	HostName github.com
	User account-name  # 如：gorpeln
	PreferredAuthentications publickey
	IdentityFile ~/.ssh/id_rsa_one
	UseKeychain yes
	AddKeysToAgent yes
# ----------------------------

# --- 第二个账号 ---
Host account-two    # 如：gorpelnTwo
	HostName github.com
	User accountTwo-name  # 如：gorpelnTwo
	PreferredAuthentications publickey
	IdentityFile ~/.ssh/id_rsa_two
	UseKeychain yes
	AddKeysToAgent yes
# ----------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;步骤三添加-ssh-key-及-测试&quot;&gt;步骤三：添加 SSH key 及 测试&lt;/h3&gt;
&lt;p&gt;分别登陆两个 github 账号，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Settings&lt;/code&gt; —&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SSH and GPG keys&lt;/code&gt; 中，点击 “new SSH key”，把 “id_rsa.one.pub” 和 “id_rsa.two.pub”这两个公钥的内容分别添加到相应的账号中。
为了确认我们可以通过 SSH 连接 github，可通过输入下面命令来验证&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 验证账号一
ssh -T git@gorpeln 
# 验证账号二
ssh -T git@gorpelnTwo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果看到下面信息，就说明连接正常。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Hi gorpeln! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;步骤四用户名和邮箱配置&quot;&gt;步骤四：用户名和邮箱配置&lt;/h3&gt;
&lt;p&gt;在第二步创建配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;时，可以直接将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-one&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-name&lt;/code&gt;设置为你的主账号（账号一）名字，如我的GitHub账户名为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gorpeln&lt;/code&gt;，你可以了通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://github.com/gorpeln&lt;/code&gt;访问到我，则直接将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-one&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account-name&lt;/code&gt;设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gorpeln&lt;/code&gt;，则对于使用主账号（账号一）操作的git仓库，正常&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt;即可，不需要其他额外的操作。全局的用户名和邮箱可以直接配置为主账号（账号一）。&lt;/p&gt;

&lt;p&gt;对于次账号（账号二）管理的项目则需要单独配置相应的账号和邮箱。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 设置局部 用户名/邮箱 配置
git config user.name &quot;xxxx&quot;
git config user.email &quot;xxxx@xx.com&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;步骤五使用-git&quot;&gt;步骤五：使用 git&lt;/h3&gt;
&lt;p&gt;git 的使用一般是从其他仓库直接 clone 或本地新建，注意配置用户名和邮箱。&lt;/p&gt;

&lt;p&gt;如果你步骤四：用户名和邮箱配置为主账号（账号一），那么该账号操作和配置第二个账号前的操作完全相同，没有任何变化，正常操作即可。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 远程仓库地址为：git@github.com:gorpeln/repo.git
git clone git@github.com:gorpeln/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次账号（账号二 ）操作项目&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 远程仓库地址为：git@github.com:gorpeln-two/repo.git
git clone git@gorpelnTwo:gorpeln-two/repo.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果你使用第三方图形工具操作，如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sourcetree&lt;/code&gt;,进行操作时，记得不要忘了&lt;strong&gt;远程仓库地址&lt;/strong&gt;的修改。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>用 Substats 和 Shields.io 为你的个人主页定制动态数据小牌子</title>
        <link>https://gorpeln.top/article/16874238349</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16874238349</guid>
        <pubDate>2023-06-22</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034171.jpg!gorpeln&quot; alt=&quot;20230622165034171&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果你浏览过一些 GitHub 的开源项目，你一定见过很多 README 文档中都会出现的五颜六色、各式各样的「小牌子」。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034172.png!gorpeln&quot; alt=&quot;20230622165034172&quot; /&gt;
最初，这些「小牌子」的主要作用是为了显示「某个 GitHub 项目」的「某种状态」，比如项目的编译是否成功、文档是否更新至最新、软件的下载数量有多少……不过，从原理的角度来说，这些「小牌子」都是通过我们给「牌子渲染服务器」提供一些数据后，服务器返回给我们一个 SVG 格式的图片来工作的。我们将返回的 SVG 图片嵌入到 GitHub 的 README 文档或其他网页里面，就完成了一个「小牌子」的制作。&lt;/p&gt;

&lt;p&gt;因此，我们不仅可以将这些「小牌子」用在 GitHub 里，如果你拥有自己的「个人主页」、「博客」或其他展示个人资料的地方，只要你可以控制网页的 HTML，能自己向其中插入一些自定义代码，你就可以借助于「小牌子服务器」来自制一些好看又能实时更新的「个人资料展示牌」、「订阅地址标识牌」等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034173.png!gorpeln&quot; alt=&quot;20230622165034173&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shieldsio-的基本用法&quot;&gt;Shields.io 的基本用法&lt;/h3&gt;

&lt;h4 id=&quot;简单定制静态小牌子&quot;&gt;简单定制静态小牌子&lt;/h4&gt;
&lt;p&gt;Shields.io 就是一个我们开头提到的「牌子渲染服务」。事实上，GitHub 上面大部分「小牌子」都是用 Shields.io 来渲染的。我们可以借助于 Shields.io 服务定制一些个性化的「小牌子」。一个最简单的例子就是：&lt;a href=&quot;https://img.shields.io/badge/%E9%A3%8E%E6%9C%AA%E6%AD%A2-gorpeln-da282a&quot;&gt;https://img.shields.io/badge/风未止-gorpeln-da282a&lt;/a&gt;，这一请求可以渲染得到如下效果的小牌子。&lt;/p&gt;

&lt;p&gt;可以发现，简单定制小牌子非常方便，最最基础的语法规则就是：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034174.png!gorpeln&quot; alt=&quot;20230622165034174&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://img.shields.io/badge/{左半部分标签}-{右半部分标签}-{右半部分颜色}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;另外，在 Shields.io 的官网上面有非常方便的「小牌子生成器」，我们可以直接用它来构造一个「小牌子」，只需要按照下图的样子：填入左半边标签、填入右半边标签，再定义右半边的颜色，点击 Make Badge 即可生成。其中，右半边的颜色我们可以用官方提供的几种预设颜色名称（下方 Colors）或者我们自己提供十六进制颜色代码都可以。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034175.png!gorpeln&quot; alt=&quot;20230622165034175&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们按照上面的方法构造一个链接，就制作完成我们的小牌子啦！这样得到的链接是一个 SVG 图片链接，我们可以直接用插入图片的语法规则加到我们的 Markdown 文本文件中或 HTML 里面。&lt;/p&gt;

&lt;h4 id=&quot;动态实时更新的小牌子&quot;&gt;动态实时更新的小牌子&lt;/h4&gt;
&lt;p&gt;事实上，我们前面生成的小牌子都是静态的小牌子：其中的文本内容是固定不变的，仅能用于做一个好看的标识。而事实上，Shields.io 生成的小牌子完全支持动态数据显示，比如粉丝、关注者数量、RSS 订阅者数量……&lt;/p&gt;

&lt;p&gt;如果我们想要显示一些动态变化的数据，那么我们就需要一个受支持的数据接口，这样我们的「Shields.io 小牌子生成服务器」就会先行从这一数据接口请求相应的动态数据，并按照请求的结果将数据渲染成不同的「小牌子」。（具体的语法请继续向下阅读）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034176.png!gorpeln&quot; alt=&quot;20230622165034176&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是，虽然 Shields.io 服务 API 的功能非常完善，能够支持许多第三方 API 节点的数据服务，但是有一些服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API 接口返回复杂，无法直接用 Shields.io 简单处理&lt;/li&gt;
  &lt;li&gt;API 访问缓慢、不稳定，经常出现超时或无法访问的情况&lt;/li&gt;
  &lt;li&gt;访问一些数据需要进行认证，直接访问会返回 403 无权限&lt;/li&gt;
  &lt;li&gt;直接不对外公开 API 接口，没有面向开发者的开放平台，无法直接请求数据&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当我们想要显示这些平台的关注者数量、粉丝数量时，往往就力不从心了。因此，我使用 Serverless 技术实现了「Substats: Subscriber Statistics」—— 一个专注提供多个服务、平台、网站的粉丝、关注、订阅数量的 API 中转站，用来专门处理这些单靠 Shields.io 不方便直接处理的疑难杂症。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Substats 项目开源在：GitHub - &lt;a href=&quot;https://github.com/spencerwooo/Substats&quot;&gt;spencerwooo/Substats&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Substats 的 API 地址位于：Home - &lt;a href=&quot;https://api.spencerwoo.com/substats/&quot;&gt;Substats API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;另外，关于如何调用 Substats API，我还撰写了比较详细的文档：&lt;a href=&quot;https://substats.spencerwoo.com/&quot;&gt;Substats Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我来简单介绍一下如何利用 Substats 配合 Shields.io 定制小牌子 ( •̀ ω •́ )✧&lt;/p&gt;

&lt;h3 id=&quot;用-substats-配合-shieldsio-制作动态小牌子&quot;&gt;用 Substats 配合 Shields.io 制作动态小牌子&lt;/h3&gt;

&lt;h4 id=&quot;通过-substats-api-获取我们期望的数据&quot;&gt;通过 Substats API 获取我们期望的数据&lt;/h4&gt;

&lt;p&gt;为了更好的配合 Shields.io 服务，我特意将 Substats 的 API 设计成简单拼接 URL 即可进行数据请求。Substats API 的语法非常简单，我们只需要关注并提供如下的两个字段即可进行请求：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;目标服务名称 source：你所想要请求的服务、网站和平台名（比如：gorpeln、weibo……）&lt;/li&gt;
  &lt;li&gt;请求数据标签 queryKey：在这一服务中查询的关注数据对应的标签或名称（比如我的用户名 gorpeln）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样，我们就可以用这样的语法来拼接一个 URL（注意第一个字符是 ?，其他用 &amp;amp; 拼接）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://api.spencerwoo.com/substats/?source={目标服务名称}&amp;amp;queryKey={请求数据标签}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;利用这样的语法，我们就可以进行数据请求啦。继续上面图示中的例子，比如我想要制作一个实时显示我自己的gorpeln的github关注数量的小牌子，我拼接成的 URL 即为：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://api.spencerwoo.com/substats/?source=github&amp;amp;queryKey=gorpeln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;非常方便！这一 URL 会给我们返回类似下面的 JSON 结果：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;status&quot;: 200,
  &quot;data&quot;: {
    &quot;totalSubs&quot;: 999,
    &quot;subsInEachSource&quot;: {
      &quot;github&quot;: 999
    },
    &quot;failedSources&quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以这样理解返回的 JSON 数据：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;status&lt;/code&gt; 是请求是否成功，成功即为 200（表示 HTTP OK）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; 就是请求返回的数据（其中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;totalSubs&lt;/code&gt; 表示总关注数量，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subsInEachSource&lt;/code&gt; 表示每个服务请求到的粉丝数据，最后 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;failedSources&lt;/code&gt; 表示请求失败的数据源。）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看到我们所需要的字段即为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$.data.totalSubs&lt;/code&gt;，也就是 999 —— 我的github总关注人数。接下来，我们只需要告诉 Shields.io：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们请求的 URL 地址&lt;/li&gt;
  &lt;li&gt;返回数据中所要的字段&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两个参数，即可成功制作一个动态小牌子。&lt;/p&gt;

&lt;h4 id=&quot;用-shieldsio-制作最终动态小牌子&quot;&gt;用 Shields.io 制作最终动态小牌子&lt;/h4&gt;

&lt;p&gt;我们继续借助 Shields.io 官网上面提供的「小牌子生成器」，这次我们稍微向下滚动，找到 Dynamic 版本「小牌子生成器」，并按照这样的规则依次操作：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;数据类型 data type 选择：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;标签 label 填入：小牌子左侧的标签，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github关注&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;API 地址 data url 填入：我们刚刚的 API URL：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.spencerwoo.com/substats/?source=github&amp;amp;queryKey=gorpeln&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;请求字段 query 填入：我们 Substats API 数据中的这一字段：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$.data.totalSubs&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;标签颜色 color 填入：一个十六进制的颜色代码，比如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;da282a&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;……（余下的两个参数：前缀 prefix 和后缀 suffix，可以根据自己的需要自行定义）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这样，我们就借助 Shields.io 构造出来一个自定义的动态 SVG 小牌子（由于我们的请求中包含有 URL 中非法的字符，因此下面这个是 URL 编码之后的 SVG 小牌子地址）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://img.shields.io/badge/dynamic/json?color=da282a&amp;amp;label=github%E5%85%B3%E6%B3%A8&amp;amp;query=%24.data.totalSubs&amp;amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dgithub%26queryKey%3Dgorpeln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230622165034177.png!gorpeln&quot; alt=&quot;20230622165034177&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;其他-substats-api-的功能和语法规则&quot;&gt;其他 Substats API 的功能和语法规则&lt;/h3&gt;
&lt;p&gt;另外，Substats API 还可以串联多个不同的数据源和它们对应的请求参数。比如，我同时请求酷安、网易云音乐、GitHub 三个平台上面的关注，即可这样构造请求（多个 source 和 queryKey 组合按照顺序进行请求即可，顺序在请求过程中不会丢失）：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://api.spencerwoo.com/substats/?source=coolapk&amp;amp;queryKey=%E5%94%90%E7%8E%89%E5%B0%8F%E7%8B%97&amp;amp;source=neteaseMusic&amp;amp;queryKey=339332&amp;amp;source=github&amp;amp;queryKey=gorpeln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以看到，上面的 URL 里，我直接串联了多个 source 和 queryKey 的请求组合，同时请求。这样我们就可以得到这三个平台上面关注者数量的总和 totalSubs，以及每个平台各自的关注者数量 subsInEachSource：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;status&quot;: 200,
  &quot;data&quot;: {
    &quot;totalSubs&quot;: 1312,
    &quot;subsInEachSource&quot;: {
      &quot;coolapk&quot;: 638,
      &quot;neteaseMusic&quot;: 361,
      &quot;github&quot;: 313
    },
    &quot;failedSources&quot;: {}
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么，我们就可以直接用 Shields.io 构造一个如下的 SVG 小牌子：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://img.shields.io/badge/dynamic/json?color=0084ff&amp;amp;label=%E9%85%B7%E5%AE%89|%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90|GitHub&amp;amp;query=$.data.totalSubs&amp;amp;url=https://api.spencerwoo.com/substats/?source=coolapk&amp;amp;queryKey=%E5%94%90%E7%8E%89%E5%B0%8F%E7%8B%97&amp;amp;source=neteaseMusic&amp;amp;queryKey=339332&amp;amp;source=github&amp;amp;queryKey=gorpeln
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样我们就可以直接得到三个平台总关注数量的一个「小牌子」&lt;/p&gt;

&lt;p&gt;同时，如果你想同时请求多个平台，但是平台中请求的数据标签名称是一样的，比如我们同时请求 Feedly 和 NewsBlur 两个 RSS 订阅服务里我自己的 RSS 链接 &lt;a href=&quot;https://gorpeln.top/feed.xml&quot;&gt;https://gorpeln.top/feed.xml&lt;/a&gt; 的订阅数量，那么我们可以：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;直接用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;|&lt;/code&gt; 将 feedly 和 newsblur 直接连接，传递给 source 作为参数&lt;/li&gt;
  &lt;li&gt;并将 RSS 链接传递给 queryKey 作为参数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从而构造这样的请求：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://api.spencerwoo.com/substats/?source=feedly|newsblur&amp;amp;queryKey=https://gorpeln.top/feed.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，我们就可以直接得到两个平台同一个 RSS 源的总订阅数量：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;status&quot;: 200,
  &quot;data&quot;: {
    &quot;totalSubs&quot;: 17,
    &quot;subsInEachSource&quot;: {
      &quot;feedly&quot;: 14,
      &quot;newsblur&quot;: 3
    },
    &quot;failedSources&quot;: {}
  }
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;从而制作表示 RSS 链接总订阅人数的「小牌子」：&lt;/p&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;
&lt;p&gt;Substats 是我借助 Serverless 技术构建的一个 Cloudflare Worker，直接部署在 Cloudflare 全球 CDN 节点上，访问速度非常的快。因此，如果你使用 Substats 和 Shields.io 来制作「小牌子」，生成 SVG 所消耗的时间的占比较大的部分应该是和原服务 API 沟通的时间（比如 NewsBlur 就特别慢）。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>个人网站，零成本、低门槛创建专属数据分析工具：umami.is</title>
        <link>https://gorpeln.top/article/16829158558</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16829158558</guid>
        <pubDate>2023-05-01</pubDate>
        <description>&lt;p&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt; 应该是当今互联网使用最广泛的网站流量分析服务。通过在网页中嵌入追踪代码，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Analytics&lt;/code&gt; 能够帮我们收集网站的流量来源，同时自动分析跳出率、转化率等核心指标。但是对于大部分中小型站点而言，接入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Analytics&lt;/code&gt; 并不是最理想的选择，因为它太复杂了，同时国内访问也不太方便。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umami.is&lt;/code&gt; 则可以看作是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Analytics&lt;/code&gt; 的精简版解决方案，它完全免费且开源，非常适合中小站点的网络流量统计分析。相对于复杂的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google Analytics&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umami.is&lt;/code&gt; 的界面也更加简洁，只关注于核心指标，并方便分享出去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735961.png!gorpeln&quot; alt=&quot;20230501123735961&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;前期准备&quot;&gt;前期准备&lt;/h3&gt;
&lt;p&gt;你需要完成以下 3 个步骤：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问 &lt;a href=&quot;https://github.com/umami-software/umami&quot;&gt;umami.is 代码仓库&lt;/a&gt;，点击右上方 Fork 到自己的帐号。&lt;/li&gt;
  &lt;li&gt;访问 &lt;a href=&quot;https://vercel.com/dashboard&quot;&gt;Vercel注册&lt;/a&gt;页面，点击使用 GitHub 登录到 Vercel。&lt;/li&gt;
  &lt;li&gt;访问 &lt;a href=&quot;https://supabase.com/dashboard/projects&quot;&gt;Supabase注册&lt;/a&gt; 页面，点击使用 GitHub 登录到 Supabase。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;1在supabase创建数据库&quot;&gt;1、在Supabase创建数据库&lt;/h3&gt;
&lt;p&gt;我们需要先在 Supabase 的主界面中找到 New Project 按钮创建一个新的数据库。名字可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umami&lt;/code&gt;，然后设置一个自己记得住的数据库密码（一会要用）。下方的 Region 区域选择 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Northeast Asia（Tokyo）&lt;/code&gt;东京区域。Supabase 本身使用了 AWS 云服务，东京区域在大陆地区的访问速度还是比较理想的。等待数据库建立，需要几分钟的时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735962.png!gorpeln&quot; alt=&quot;20230501123735962&quot; /&gt;&lt;/p&gt;

&lt;p&gt;建立之后，点击左下方的 Project Settings，选择 Database，找到 Connection string 中的 URL 一栏，&lt;strong&gt;复制内容，并将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[YOUR-PASSWORD]&lt;/code&gt;替换为上一步生成的密码&lt;/strong&gt;。
Supabase 平台的操作就结束了。
&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735963.png!gorpeln&quot; alt=&quot;20230501123735963&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2在-vercel-部署-umami&quot;&gt;2、在 Vercel 部署 Umami&lt;/h3&gt;
&lt;p&gt;登录&lt;a href=&quot;https://vercel.com/dashboard&quot;&gt;Vercel&lt;/a&gt; 之后，点击右上角 Add New Project，并导入事先 Fork 的项目仓库。创建项目的页面中，会自动加载你 GitHub 帐号下方的代码仓库。还记得准备步骤 Fork 的 umami.is 仓库吗？选中即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735964.png!gorpeln&quot; alt=&quot;20230501123735964&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在 Configure Project 中需要设置两个环境变量（&lt;strong&gt;Environment Variables&lt;/strong&gt;）。
分别添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HASH_SALT&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DATABASE_URL&lt;/code&gt;：是上一步在 Subabase 复制的 URL，记得替换自己的 Password；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HASH_SALT&lt;/code&gt;：它的值可以是任意随机英文字符串，比如我使用了我的用户名 HUHUHANG，你也可以自定义其他随机字符串&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后点击 Deploy，等待两分钟。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735965.png!gorpeln&quot; alt=&quot;20230501123735965&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3测试和设置&quot;&gt;3、测试和设置&lt;/h3&gt;
&lt;p&gt;至此，主要步骤已经顺利完成，你需要做的只是耐心等待项目部署完毕。完成之后，Vercel 会自动跳转到项目主页，并随机分配一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;域名&lt;/code&gt;（需要科学上网，可以绑定自己的域名）。点击 &lt;strong&gt;Visit&lt;/strong&gt; 访问项目，umami 默认的后台登录的用户名是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin&lt;/code&gt;，密码是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umami&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;1自定义域名&quot;&gt;1）自定义域名&lt;/h4&gt;
&lt;p&gt;首先是设置一个独立域名，当然前提条件是你有自己的域名，没有的话可以到任意域名服务商（阿里云、腾讯云等）购买。当然你也可以一直使用 Vercel 自动分配的域名（Vercel 自动分配的域名需要科学上网）。&lt;/p&gt;

&lt;h4 id=&quot;2重设-umami-密码并绑定站点&quot;&gt;2）重设 umami 密码并绑定站点&lt;/h4&gt;
&lt;p&gt;不要忘记到 umami 后台重设默认的管理员密码。同时，你可以新建站点并获取到数据追踪代码嵌入到你的站点中。
&lt;img src=&quot;https://img.gorpeln.top/blog/20230501123735966.png!gorpeln&quot; alt=&quot;20230501123735966&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里非常推荐开启「&lt;strong&gt;启用共享链接&lt;/strong&gt;」的选项，这是 umami 的一大特色，可以方便分享你的站点访问数据。同时当你自己查看时，可以免登录。你可以 &lt;a href=&quot;https://umami.gorpeln.eu.org/share/oWC5HwUyPml1gkRI/gorpeln.top&quot;&gt;访问我的示例分享页面&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果需要删除网站，先将语言切换至 English，中文状态无法删除。&lt;/p&gt;

&lt;h3 id=&quot;4常见问题和小结&quot;&gt;4、常见问题和小结&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Q：Vercel 和 Supabase 是免费的吗？我能用多久？&lt;/strong&gt; &lt;br /&gt;
A：目前 Vercel 的个人帐号完全免费，企业帐号才需要付费。Supabase 的免费数据库存在 500 MB 的限制，对于中小站点这个容量理论上够用很多年了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：umami 的访问速度如何？&lt;/strong&gt;  &lt;br /&gt;
A：据我所知，Vercel 使用了 Google Cloud 的云服务，距离大陆地区最近的节点在台湾省和香港特别行政区，访问速度还算理想。而 Supabase 使用了 AWS 云服务，一开始我们创建的数据库就选择了离大陆地区最近的东京数据中心。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q：umami 后续如何升级？&lt;/strong&gt; &lt;br /&gt;
A：Vercel 的部署是自动触发和完成的，也就是说当 GitHub 代码仓库更新时，Vercel 会帮你自动部署上线最新版本的 umami。你可以不定期访问你 Fork 后的代码仓库，选中 Fetch upstream 从 umami 官方仓库同步最新的代码后即可自动升级。当然，你还可以从一开始直接部署官方仓库的代码，完全跟随官方版本迭代升级。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>全飞秒近视手术过程和恢复记录</title>
        <link>https://gorpeln.top/article/16827504397</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16827504397</guid>
        <pubDate>2023-04-29</pubDate>
        <description>&lt;p&gt;4 月中旬做了一个&lt;strong&gt;全飞秒&lt;/strong&gt;近视手术，在这里记录一下当天、术后的感受，希望可以给到好奇的同学一些参考。&lt;/p&gt;

&lt;h3 id=&quot;手术当天&quot;&gt;手术当天&lt;/h3&gt;
&lt;p&gt;长话短说，实际手术过程 2 分钟搞定。&lt;/p&gt;

&lt;p&gt;3 月份突发奇想不戴眼镜是不是很爽，然后就去检查了下适合做什么的，好多台机器验了下眼睛，最后发了 2 瓶眼药水在术前 3 天开始滴。&lt;/p&gt;

&lt;p&gt;到了做的那天，先去交钱，验光，然后排队等到叫，换上手术服，不能带手机，眼睛等外部东西，先洗眼睛 10mim，不停用药水去冲，挺酸爽。然后给脸部用酒精全消毒，接着坐到手术室门口等叫号。&lt;/p&gt;

&lt;p&gt;叫到号后，会先在眼睛里面滴麻药眼药水，然后就扶进去了，躺到机器上，一只眼睛一只眼睛做，过程就是盯着绿灯看 20s，然后告诉你非常棒，最后一边几秒钟用镊子夹出切割体，最后用机器观察了下，没问题直接出手术室。&lt;/p&gt;

&lt;p&gt;出来以后，出来后眼睛不疼，不过开始流泪了，手里拿着眼药水，分别每 5 分钟累计滴 4 次，这个过程开始时候是那种想哭流泪的感觉，然后是又困又想哭那种感觉，最后是很困眼睛有点儿酸胀感觉。慢慢发现看远处东西相比戴眼镜时候要有 50%效果了，不过基本有一种朦胧美，近处的东西基本看不清，老花眼感觉，药水滴完以后，医生检查下，没有问题就回家了，说是明天会逐步恢复。&lt;/p&gt;

&lt;p&gt;回家路上，发现所有灯光都有一层蒙雾感，好比多了一个下雨过后背景感觉，同样很困，到家以后躺着又不想睡觉了，但是也不想也看不清手机，听了一小时老郭的济公传，笑哈哈，就出门吃饭了。&lt;/p&gt;

&lt;p&gt;回到家，发现手机看得清了，不过边框全部加了一层雾化美，今天晚 10 点前睡觉，期待明天起床世界光明，Hello World！&lt;/p&gt;

&lt;h3 id=&quot;手术后第一天&quot;&gt;手术后第一天&lt;/h3&gt;
&lt;p&gt;昨晚睡得早，早上7 点就醒了，眯眯眼开了个小灯发现房间里面东西全部都清楚了，甚至远处书柜的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JavaScript 权威指南&lt;/code&gt;这本书名都看清了，很神奇，有一种瞎子复明的神奇感觉。&lt;/p&gt;

&lt;p&gt;立马起床拉开窗帘，看到远处一人斜挎着黑色背包勾着腰边走路边看手机，环卫工人带着黄色帽子穿着橙色衣服在扫街，对面小河边一人戴着淡黄色帽子白色上衣黑色裤子白色鞋子在跑步，应该以前戴眼镜也看得到这种，不过没有怎么 Care 就过去了，早上远处视力应该恢复到术前水平了，但是近处看手机还有强自发光物体文字还是有一圈淡淡的光晕，不习惯但挺好看。&lt;/p&gt;

&lt;p&gt;上午开车去进行了第一天复查，后面一周一月三月半年都需要去复查下，可以给这个时间给大伙同步状态，到了医院检查了下视力，居然双眼 1.0，不敢想象摘了眼镜我居然可以看到这么小的 E，然后医生检查下，说恢复得不错，给安排了下接下来一周要滴的眼药水，一共 3 瓶，累积 4 到 6 次的，然后就离开了。&lt;/p&gt;

&lt;p&gt;注意事项是白天外出需要带墨镜，在室内无所谓，但是我想着防止揉眼睛昨天给买了一个护目镜，戴着还挺舒服，睡觉也可以戴着，从医院出来，想着也不想看手机，就去了散散步，外面热但是很凉快有风，11 点出去，走了 4 公里样子然后找了山顶一个咖啡厅坐了坐，看了看书，今天看纸质书以及不发光的 Kindle 感觉和之前戴眼镜没啥区别了，看手机文字发光由于有光晕也没怎么看，晚上回家，发现路上红绿灯还是有些光晕，不过比昨天弱很多了，应该几天后会正常。&lt;/p&gt;

&lt;p&gt;第一天大概就这样了，不过有一个事情很麻烦，就是眼睛 7 天不能碰水，只能找理发店帮忙洗头发，其他的除了眼药水还挺舒服，和正常没啥区别了。明天应该可以正常上班，不过不能久看电脑和敲代码，请个假在家办公也行。&lt;/p&gt;

&lt;h3 id=&quot;手术后第一周&quot;&gt;手术后第一周&lt;/h3&gt;
&lt;p&gt;今天去做了术后一周复查，双眼1.2说是恢复挺好，整体视力是和手术前戴眼镜差不多了，不过还是不能久看电脑屏幕，需要时不时歇一歇才能缓解，此外看红绿灯还有一点光晕，不过都属于正常情况，一个月后预计会正常。&lt;/p&gt;

&lt;p&gt;这周第一天休假了，在家处理简单事情，打开电脑那一刻一种凹面镜感觉，不太能适应，同时不能久看，带上墨镜舒服很多，不过有些滑稽，这天除去发光体不适应，其他的都正常。&lt;/p&gt;

&lt;p&gt;第二天正常上班，也即手术后第三天，特地将电脑手机系统都调大一个度，上午基本能适应，下午眼睛还是不能久看，加上办公室灯光反光屏幕更加干扰，还好下午有几个技术方案评审，给过去了。防止明天继续不适应，特地jd买了以前开车防眩光夜视镜，隔天早上就到了。&lt;/p&gt;

&lt;p&gt;后面3天上班，加上夜视镜的过滤强光，以及视觉能力本身逐步的恢复，到周五的时候终于差不多满足之前上班时候戴眼镜状态了，不过会刻意不过度用眼，看久了电脑还是会眼睛累，特地也问了下之前做过朋友，属于正常情况，继续等恢复。&lt;/p&gt;

&lt;p&gt;关于青年人的眼睛近视，其实正常用眼在你成年后，近视度数基本上不会太涨，和医生交流说大部分度数变坏都是晚上用手机刷剧打游戏，特别是熄灯后忘记时间，平时看电脑办公属于长距离不会太伤害眼睛的。&lt;/p&gt;

&lt;p&gt;这个恢复过程，有三个东西帮助很大。&lt;br /&gt;
第一个必须是&lt;strong&gt;夜视镜&lt;/strong&gt;，超级推荐开车朋友搞一个，白天可以过滤强阳光，看到的树叶都是加了滤镜那种舒服，晚上可以过滤对方刺眼车光，对于杭州这种光污染比较严重的城市，简直是神器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039121.jpg!gorpeln&quot; alt=&quot;20230429144039121&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二个是一个叫做海露的&lt;strong&gt;滴眼液&lt;/strong&gt;，其实一共有开3个滴眼液，另外两个用于消炎的，海露这个用于缓解疲劳和干眼的，滴着挺舒服的，戴眼镜或者隐形的朋友可以试试，不过需要找到适合自己情况的种类。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039122.jpg!gorpeln&quot; alt=&quot;20230429144039122&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三个就是&lt;strong&gt;墨镜&lt;/strong&gt;了，将之前的近视墨镜换成了平视的镜片，白天强光或者外出必备，之前戴眼镜时去眼镜店配了一个近视墨镜（其实有数据淘宝更便宜），在外面太阳场景玩远比带着普通眼镜要舒服太多了。&lt;/p&gt;

&lt;p&gt;基本就是这样的体验，最近还想着养成一个晚11点前睡觉习惯，看能坚持多久。&lt;/p&gt;

&lt;h3 id=&quot;手术后第一个月&quot;&gt;手术后第一个月&lt;/h3&gt;
&lt;p&gt;全飞秒近视手术后的第 40 天记录，上周末有去医院进行术后复查，将我的一个月视觉感受记录于此。&lt;/p&gt;

&lt;p&gt;整体状态，视力检查两只眼睛 1.2，当前看远处风景，近处电脑均恢复到之前戴眼镜的效果，较上次一周后的明显区别是「眼睛看久了电脑也不累了，外出假如不是大太阳，不带墨镜也习惯了」，不过有 2 ～ 3 次早上起床眼睛感觉还是有点儿干涩，之前一周左右是眼睛看久了屏幕会花需要休息，外出需戴墨镜。&lt;/p&gt;

&lt;p&gt;这个月还是每天 4 次的滴眼药水，海露和丽爱思，用于眼睛保湿防干涩，后面就只需滴海露，海露滴完蛮舒服，以后应该也会常备着代替日常眼药水。&lt;/p&gt;

&lt;p&gt;不过视力好了也有一个担心，由于没有啥不适，敲代码会容易和之前一样上瘾，一天 9 小时都对着电脑有恃无恐，后面这一块需注意，每小时通过手表提醒休息下，需要克制。&lt;/p&gt;

&lt;p&gt;不戴眼镜的生活还是蛮爽的，身体好比少了一个外部设备的轻松感，不过半年内还不能游泳，等待下次来更新半年后感受。&lt;/p&gt;

&lt;h3 id=&quot;答好友疑问&quot;&gt;答好友疑问&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;为什么要做手术？&lt;/strong&gt;  &lt;br /&gt;
其实我是属于比较喜欢尝试的人，同时当时设备了解到已经很先进了，加上医生也牛逼，后面想去玩玩冲浪已经刺激运动戴眼镜真不方便，已经戴了 10 年眼镜了，觉得还年轻，不想老了遗憾而已。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;是否可以推荐医院和医生？&lt;/strong&gt;    &lt;br /&gt;
抱歉这种属于有风险的事情，平安还好，出事了就麻烦了，很建议想做的去医院检查下，医生会有专业建议能不能做，以及用什么方案，同时并不是越贵越好，而是越适合自己的越好，当前每种方案技术其实很先进了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;你不怕后遗症吗？&lt;/strong&gt;   &lt;br /&gt;
后遗症我在文章后面会贴一下，一般是干眼症啥的，不过滴眼药水可以慢慢缓解变好，同时我不是太在乎短期问题，更在乎长期不戴眼镜的体验，同时肯定是有后遗症的，只不过带来的好处会大于问题风险以及钱的成本。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;马化腾不做我不做？&lt;/strong&gt;    &lt;br /&gt;
其实眼科手术并不是想做就做，还取决于年龄、角膜厚度、眼睛本身的健康状态很多因素决定，会有一个比较全面的术前检查。此外其实近视手术定义上并不是治病的那种手术，居然被定义成“医美类型”，好比整容一样，并不是所有的整容医生都会自己去整一下一样。&lt;/p&gt;

&lt;h3 id=&quot;万事需谨慎&quot;&gt;万事需谨慎&lt;/h3&gt;
&lt;p&gt;有类似诉求同学，可以小红书或者 YouTube 先了解一波来做功课，这里我找到几张图用于分析手术对比，优缺点，后遗症，注意事项，贴到下面，不过万事须谨慎，这东西还是有极低概率的风险。
&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039123.jpg!gorpeln&quot; alt=&quot;20230429144039123&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039124.jpg!gorpeln&quot; alt=&quot;20230429144039124&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039125.jpg!gorpeln&quot; alt=&quot;20230429144039125&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230429144039126.jpg!gorpeln&quot; alt=&quot;20230429144039126&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>高德地图产品使用体验报告</title>
        <link>https://gorpeln.top/article/16786112870</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16786112870</guid>
        <pubDate>2023-03-12</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;编辑导语：导航类软件，已经成为了我们生活中必不可少的一大工具，能够解决我们对陌生环境的一些痛点。本文以高德地图为例，分享了该软件的使用感受，总结了高德地图的用户体验感，一起来看看。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一产品概况&quot;&gt;一、产品概况&lt;/h3&gt;
&lt;h4 id=&quot;1-体验环境&quot;&gt;1. 体验环境&lt;/h4&gt;
&lt;p&gt;产品体验：高德地图&lt;/p&gt;

&lt;p&gt;软件版本：11.13.0.2925&lt;/p&gt;

&lt;p&gt;手机系统：MIUI 12.5.10&lt;/p&gt;

&lt;p&gt;体验人：gorpeln&lt;/p&gt;

&lt;h4 id=&quot;2-产品概况&quot;&gt;2. 产品概况&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Slogan&lt;/em&gt;&lt;/strong&gt;：「导航专业，数据准确」&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;产品介绍&lt;/em&gt;&lt;/strong&gt;：是一款高德软件有限公司旗下的一款地图导航类APP。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;官方介绍&lt;/em&gt;&lt;/strong&gt;：高德地图(Amap) 是一款免费的地图导航产品，由电子地图、导航和LBS服务解决方案提供商高德软件(纳斯达克:Amap)提供。高德地图数据覆盖中国大陆及香港澳门，遍及337个地级2857个县级以上行政区划单位；导航支持GPS、基站、网络等多种方式。可自动生成“最短”“最快”“最省钱”等多种路线规划以供选择，可根据实时路况选择最优公交/驾车出行路线。&lt;/p&gt;

&lt;h4 id=&quot;3-产品发展历程&quot;&gt;3. 产品发展历程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）第一阶段：艰辛探索和技术积累（2002年——2004年）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高德的创业团队从20世纪90年代起就已开始涉足GPS领域的工作，2002年7月，高德软件有限公司成立后，高德的研发团队经过艰辛探索，根据当时国家基础地图数据的特点，历经半年的时间，终于开发完成一套具有自主知识产权的数据采集工具和编辑处理平台。&lt;/p&gt;

&lt;p&gt;技术的探索和创新给高德带来了商业契机。2002年8月，高德与爱信AW、富士Ten等公司合资成立北京艾迪菲导航科技有限公司，开始致力于车载导航电子地图销售市场的开拓。&lt;/p&gt;

&lt;p&gt;【大事记】2002年7月，高德软件有限公司成立。&lt;/p&gt;

&lt;p&gt;【大事记】2002年8月，高德与爱信AW、富士Ten等公司合资成立“北京艾迪菲导航科技有限公司”。&lt;/p&gt;

&lt;p&gt;【大事记】2003年1月，高德开发完成具有自主知识产权的数据采集工具和编辑处理平台。&lt;/p&gt;

&lt;p&gt;2004年6月，高德成为全国第一家获得导航电子地图甲级测绘资质的民营企业，并通过ISO9001认证。获得甲级测绘资质后，高德开始大规模采集数据，逐步构建了一个优质的数据库。&lt;/p&gt;

&lt;p&gt;【大事记】2004年6月，高德成为国家甲级测绘资质单位并成为全国第一家获得导航电子地图甲级测绘资质的民营企业。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）第二阶段：发展壮大和引领行业（2005年——2009年）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高德获得导航电子地图甲级测绘资质后，在进行导航电子地图数据库内容和导航引擎研发、积累的同时，致力于探索和创新商业模式，为客户提供一体化解决方案，拓展业务领域。&lt;/p&gt;

&lt;p&gt;高德领先的核心技术和创新的商业模式使高德的产品服务在汽车导航应用、无线互联网位置服务应用、政府和企业应用三大业务领域取得优异的成绩，也确立了高德在中国导航产业的领先地位。&lt;/p&gt;

&lt;p&gt;【大事记】2005年8月，高德收购中国领先的基础地图服务提供商北京图盟科技有限公司。&lt;/p&gt;

&lt;p&gt;【大事记】2005年8月，高德开始向宝马、本田等车型提供导航电子地图。并为新浪和Google等网站提供本地搜索服务。&lt;/p&gt;

&lt;p&gt;【大事记】2007年5月，高德全资收购厦门纳维特科技有限公司。&lt;/p&gt;

&lt;p&gt;【大事记】2007年10月，完成西藏数据采集作业，标志着高德完成覆盖全国的实景数据采集。&lt;/p&gt;

&lt;p&gt;【大事记】2009年1月，高德成为2010年上海世博会导航地图及应用服务项目独家赞助商。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（3）第三阶段：成功上市，全力转型（2010年——2014年）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2010年7月1日，高德在美国纳斯达克全球精选市场成功上市，股票代码为AMAP，实现了公司发展新的历史性跨越。&lt;/p&gt;

&lt;p&gt;【大事记】2010年7月1日，高德控股有限公司（AutoNaviHoldingsLimited）在美国纳斯达克全球精选市场成功上市，股票代码为AMAP。&lt;/p&gt;

&lt;p&gt;2010年9月，高德获得国家测绘局颁发的《互联网地图服务甲级测绘资质》，这是高德继获得导航电子地图甲级测绘资质、航空摄影甲级测绘资质后的第三个甲级测绘资质。10月，高德荣登2010德勤高科技、高成长中国50强。&lt;/p&gt;

&lt;p&gt;【大事记】高德荣登2010德勤高科技、高成长中国50强。&lt;/p&gt;

&lt;p&gt;世博会期间，所有世博会指定导航终端设备里都装载了高德地图，不论是城际间，还是世博园区内，游客们都能充分感受高德地图在道路导航、实时交通、路线规划等方面的便利，为所有参展方和参观者营造难忘的世博体验。&lt;/p&gt;

&lt;p&gt;高德也由此获得由中国地理信息系统协会颁发的“上海世博会GIS服务特殊贡献单位”奖。&lt;/p&gt;

&lt;p&gt;2012年9月，高德成为苹果在中国的地图服务提供商，并于9月24日正式上线服务。这大大的加快了高德在整个移动互联网领域前进的步伐，在整个产业界引起了巨大的轰动。&lt;/p&gt;

&lt;p&gt;当月，高德公司荣获中国卫星导航定位协会颁发的“中国卫星导航与位置服务行业2012最具价值品牌”，高德地图凭借其出色的产品性能和用户体验，荣获2012中国互联网大会“最佳实践”奖。2014年02月，阿里以11亿美元现金完购高德。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（4）第四阶段：阿里全资收购高德（2014年4月至今）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2014年4月，高德正式与阿里巴巴集团达成并购协议。阿里将以每股普通股5.25美元或每股美国存托股份(ADS)21.00美元的收购对价收购高德其余72%的股份。&lt;/p&gt;

&lt;p&gt;高德公司的经营范围是电子出版物批发、网上销售；增值电信业务中的信息服务业务；第二类增值电信业务中的呼叫中心业务；测绘服务；设计、制作、代理、发布广告；货物进出口、技术进出口、代理进出口；销售计算机软硬件及外围设备；技术开发、技术转让、技术咨询、技术服务等。&lt;/p&gt;

&lt;h3 id=&quot;二市场分析&quot;&gt;二、市场分析&lt;/h3&gt;
&lt;h4 id=&quot;1-中国手机地图发展现状&quot;&gt;1. 中国手机地图发展现状&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447681.png!gorpeln&quot; alt=&quot;图2-1 2015-2020年中国手机地图用户规模及预测&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据艾媒网数据显示，中国手机地图的用户规模可以看出来，使用手机地图的人数规模不断上涨，从2015年到2016年的增长速度最快，有9.8% 的增长速度，这一年与高德地图、百度地图上线后功能的完善有很大关系，后期因为手机地图市场逐渐饱和，用户增长也不是那么明显，但是使用手机地图的人数依然上涨，趋势依然明显，根据艾媒网数据预测预计2022年使用手机地图的用户有望超过8.5亿人。&lt;/p&gt;

&lt;p&gt;小结：手机地图的用户数量从2015年的6.05亿增长到2020年的7.68亿，增长了近30%，预计到2022年末增长率可达40%，近些年逐渐速度放缓，这种现象同很多互联网产品一样，前期市场处于蓝海领域，地图导航技术不够专业，相应的服务不够完善，增长空间大，而后期在产品定位用户需求不断精准，地图定位、导航、大数据等专业技术不断发展，致使产品用户数量在不断增加，而后期市场趋于饱和，增速逐渐减缓。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447682.jpeg!gorpeln&quot; alt=&quot;图2-2 2020 Q3季度中国手机地图APP活跃量&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从数据来看中国高德地图和百度地图占据的用户数量是最多的，而腾讯地图和搜狗地图占据的用户数量明显是没有高德和百度的用户数量大。&lt;/p&gt;

&lt;p&gt;而数据背后真实的原因在于高德地图依托阿里系内部资源合作和AI技术支持，连接饿了么口碑为用户提供本地生活服务功能，不断完善功能产品，提高地理信息精确度，在市场竞争中占据有利地位，综合品牌竞争力行业内属于领先地位。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447683.jpg!gorpeln&quot; alt=&quot;图2-3 主要手机地图用户认知度&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2019年第三季度主要手机地图产品用户认知方面，高德地图依托阿里系生活服务、移动出行资源和车载导航的普及，用户认知度排名第一，为88.3%，百度地图作为百度旗下重要产品，在语音智能，无人驾驶等领域具有重要地位，用户认知度紧随其后为86.7%。&lt;/p&gt;

&lt;p&gt;总结：通过分析中国手机地图市场现状可以发现，高德地图的使用情况和市场占有率都是最好的，原因在于高德地图在驾车、公交、步行、骑行、打车甚至是火车导航等功能方面不断完善，特别是准确的公交地铁信息，以及驾车时候的智能语音系统提醒限速、摄像头、红绿灯等一系列的功能的不断完善，用户的使用产品的体验在不断增强，用户数量在逐步积累增加。&lt;/p&gt;

&lt;p&gt;发展预测：随着大数据、区块链等技术的发展，人们越来越多的使用地理地图，和基于地理位置相关的服务，并且在中国地图应用活动用户数已接近8亿，且增速减缓，中国地图应用行业步入成熟期。&lt;/p&gt;

&lt;p&gt;用户使用手机地图的需求主要在两大方面：一方面，未来手机地图场景化应用在面向在线旅行、移动出行的需求越来越大，另一方面，针对无人驾驶，车联网等新型产品也成为地图行业提供增量空间，因此后期中国手机地图的发展方向将会在完善的生态体系，人工智能方向不断发展。&lt;/p&gt;

&lt;h4 id=&quot;2-行业宏观环境分析pest&quot;&gt;2. 行业宏观环境分析（PEST）&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）【P】政治环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2017年7月1日起正式施行《中华人民共和国 测给法》，加强对互联网地图服务的监管 严格了用于测纶的无人机准人制度。促进了 地理信息成果的共享和应用：&lt;/p&gt;

&lt;p&gt;2018年发改者及地方政府发、多项法规，为 自动驾驶保驾护航。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）【E】经济环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我国旅游业、移动出行、生活服务等型快的調 费市场为手机地图提供增量空间；我国汽车保有最逐年增长，带动了地图企业车 載导航硬件设备市场的发展；我国布局车联网，为手机地图行业需来新的增涨空间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（3）【S】社会环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我国城市公共交通拥堵现象严重，地图企业 与交通部门合作。推出“交通大脑”，缓解交通紧张状态我国消费升级，旅游成为居民的日常消费。使用手机地图查询量点信息成为眼游常态；中国提出了“中国制造2025”，具体到汽车 领城，无人驾驶。新能源汽车等新型慢式生机物物。手机地国赋前汽车导航，提供两藏度服务。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（4）【T】技术环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户参与地理信息收集，并将地照POI数据更新及交通路况等信息上传至平台；我国地理测绘技术的进步、北斗卫星导航系统的完善，大大提高手机地图信息的准确性和全面性：人工智能、VR技术的发展，提高了地离信息的准确度。&lt;/p&gt;

&lt;p&gt;总结：从中国手机地图的行业宏观环境分析来看，中国手机地图的发展前景还是不错的，从政治和社会环境来看，针对紧张的交通用户的环境，搭建起手机地图导航的管理体系是非常有必要的，现在的技术手段和经济环境来看，大力研发技术所能投入的资本是不断增加的，不论是国家还是企业都在这方面投入的资本都很大。&lt;/p&gt;

&lt;h4 id=&quot;3-商业模式&quot;&gt;3. 商业模式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）对于与地图相关商家的增值服务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;高德地图通过实时交通路况、在线导航和第三方生活服务资源整合等增值服务，致力于打造以位置为纽带整合诸多第三方信息及商务服务, 占领更多的智能终端，将各类生活服务、电子商务融合其中，最终一站式解决用户在移动生活中的种种需求，发展出海量用户。借助庞大的用户规模与活跃的客户群吸引商家，形成资金回流，其中主要有以下三种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;为本地生活服务商家提供基于位置服务，获取服务费用&lt;/strong&gt;  &lt;br /&gt;
  高德公司提供数据以按期收取服务费或授权费并且根据订单的完成数量收取一定利润分成，以获得稳定现金流。比如高德在地图版块也增添了“出租车”业务，与滴滴打车、快的打车同时合作，获得服务费用及分成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;通过搜索项目获得广告费用&lt;/strong&gt;   &lt;br /&gt;
  首先，高德地图效仿百度搜索引擎的商业模式，采用关键词搜索竞价排名的方式，使竞价高的商家获得更多关注并收取费用。另外，高德地图在手机某些项目中划出一部分作为广告区域，由商家竞价获得投放权以获得服务费。最后，高德地图建立大数据库对搜索数据进行深度挖掘，为商家进行广告定点投放、精准市场营销提供数据支持，获得相应咨询费。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;面向地图标示点商家的增值服务&lt;/strong&gt;  &lt;br /&gt;
在大用户基数下为商家提供不同层次的特殊标示服务，打开某地区地图时，该商家将会有突出的展示，依据地图展示层次收取相应费用，将为商家获得更多关注。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（2）手机预装软件和与运营商合作客户端下载软件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;公司与三星、摩托罗拉等众多手机终端厂商合作，为其提供手机预装导航数据和软件。为了使手机消费者使用更便利，手机厂商会有选择的预装部分优秀的软件，于是就必然要向软件提供商支付一定的授权费用，但是随着免费软件的普及，该份额在逐渐减少。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（3）流量变现&lt;/strong&gt; &lt;br /&gt;
依据互联网的特性，免费的产品还是会占据主流，取得更多的市场份额，创造更大的用户规模，最后通过流量变现实现盈利模式。高德将会与手机运营商展开流量经营方面的合作，包括定向流量和流量奖励，通过获得流量费用分成形成利润。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（4）互联网位置服务&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;作为中国市场上为数不多的具有三甲测绘资质的民用企业，高德地图将处理好的测绘数据或基于位置的定位导航技术提供给其他与位置相结合的企业。比如大家所熟知的高德与苹果中国地图的合作，以及此前高德与新浪、阿里巴巴、腾讯、京东在基础地图方面的合作，向赶集网、搜房网等12万家网站和第三方开发者提供地图API服务。同时获取更多GPS信息反馈，完善基础地图数据。&lt;/p&gt;

&lt;h4 id=&quot;4-营销方式&quot;&gt;4. 营销方式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）线上营销&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;建立专业的公司网站，对公司的主要业务进行详细清晰地介绍，提供免费的网络地图并提供免费下载软件的渠道。在网站内开设专业技术讨论交流区，为对基于位置技术等互联网技术达人提供交流平台，通过注册的方式，增强其影响力，加强顾客粘性。另外，设置意见反馈区，及时与消费者沟通，了解产品的提升空间，提高产品竞争力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“有声有色”的独特的产品代言形式，提升品牌形象。2013年签约超高的人气和影响力和敬业精神兼具的“全民女神”林志玲做品牌代言人，不仅有平面代言，林志玲的女神娃娃音也被植入地图、导航全过程，推出了国内地图导航领域内的首款明星真人语音导航。听觉体验作为地图导航重要的一环，女神音在为用户提供功能性服务的同时，更能为用户的生活增添乐趣。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;线上贴片广告等有针对性的投放广告。在著名的门户网站、视频网站投放短小精悍的广告，提高品牌的影响力。比如2013年上旬，高德地图推出了一组名为“高德地图哪都熟”的主题广告，将高德地图整合的诸多生活服务巧妙的展示在受众面前。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;借助微博、微信等社交互动平台进行推广，并借此第一时间了解公众的需求与建议。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（2）线下营销&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;电影营销：结合《乔布斯传》国内首映，高德地图借用宣传优势，以苹果独家在华地图服务商的身份展开粉丝营销。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与草莓音乐节达成战略合作，在音乐节活动现场，高德诸多结合驾驶情景与音乐的展示，让参会的年轻人感受高德带来的便利，提升高德在年轻人中的品牌效应。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;高德也在结合自身产品进行O2O营销，发挥其本地化生活服务入口的作用，通过团购、优惠券、酒店预订等与电商合作进行推广。尤其是与阿里的跨界营销更为紧密，比如双十一购物盛宴的导航辅助，消费者可借助高德地图发现线下打折商铺的具体位置，与阿里等电商合作也有助于提升知名度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于用户角度和自身优势的主题广告，包括投放在公交车、出租车等交通工具上，指引用户去往终点；投放在地铁站中，提示“前方即将换乘”等。另外还有结合具体位置的广告巷战和定制服务，针对各地活跃人群的需求，结合高德地图功能，提供找代驾、打车、避堵等实用功能信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动高德LBS应用大赛，向广大IT从业者及开发爱好者而举办的产品开发大赛，一方面推广其云到端的全套LBS解决方案，另一方面为公司的发展储备人才。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;（3）打造良好的企业形象&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;以“开放、包容、合作、创新”作为企业文化，以“知你所在，寻你所需，移动生活尽在掌握”作为企业使命，内部设立良好的激励机制，调动内部人员的积极性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;良好的危机公关能力。2013年中央电视台315晚会上，央视称，高德地图的位置共享服务会收集用户账号和密码，并以明文的方式传给高德的服务器。面对央视质疑，高德第一份声明就先向用户致歉，并在微博上表示，晚会曝光两年前的旧版本早已第一时间被修复，用户的隐私问题一定会得到高德保护。在负面评论还没有形成之际，高德已就央视曝光的问题对民众给予回应和释疑，用面对负面不逃避、以正面回应换取社会正面理解的态度，展现出了一个成熟企业应对得宜、诚恳有担当的企业形象。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;积极承担社会责任。2013年雅安地震时期，高德向雅安捐助150万元，包括100万元现金和价值约50万元的高德导航应用。并从自身平台优势出发、结合位置推出了高德地图“雅安寻人救助平台”。为抗震救灾不遗余力的高德地图被誉为“用地图承载爱”，用情感和用户互动，展示出了充满正能量的企业形象与态度，赢来了收获与肯定。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三用户分析&quot;&gt;三、用户分析&lt;/h3&gt;
&lt;h4 id=&quot;1-用户规模&quot;&gt;1. 用户规模&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447684.png!gorpeln&quot; alt=&quot;20230312165447684&quot; /&gt;&lt;/p&gt;

&lt;p&gt;根据阿里巴巴《2021年财政年度报告》的数据显示，高德地图的日均活跃用户数如今稳定在1亿左右，并逐步由一个导航工具，走向路途中指引方向的跨场景、多功能的生活服务平台。此外，根据QuestMoblie的数据显示，&lt;/p&gt;

&lt;p&gt;2021年6月，高德地图的月活跃用户规模达到6.3亿左右，较2020年同期的5.3亿上升了1亿左右，增速为18.9%;在此当中，有68.8%的新安装用户来自于百度地图，有17.5%的新安装用户来自于腾讯地图。&lt;/p&gt;

&lt;p&gt;而百度的月活跃人数略微落后，根据百度的年报数据显示，2020年百度地图的月活跃人数为3.16亿人。&lt;/p&gt;

&lt;p&gt;总结：高德的用户规模已经占据中国手机地图类APP行业内的龙头，并且地图在出行方式上覆盖全，运营型功能最多，在被调研者中的评价普遍较高，使用时长也较久，说明高德地图的用户体验和黏性较高&lt;/p&gt;

&lt;h4 id=&quot;2-用户标签&quot;&gt;2. 用户标签&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447685.png!gorpeln&quot; alt=&quot;20230312165447685&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;从性别来看&lt;/strong&gt;：  &lt;br /&gt;
男性比例占据六成，女性群体只占据四成。&lt;/p&gt;

    &lt;p&gt;数据原因原因如下：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;男性群体做司机的数量相比较女生来说较多，因此需求更高。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;男性针对地理方向感相比女生来说更强一些，因此使用地图导航也会跟更多。&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;平时日常生活出行大部分比例是男性开车，男性对导航的需求就更大。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;从年龄分布来看&lt;/strong&gt;：  &lt;br /&gt;
其中超过四成的用户是24岁一下的年轻人，三成的用户是24-30岁的人群，普遍来看年轻群体是高德的主要使用群体。&lt;/p&gt;

    &lt;p&gt;数据原因如下：&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;这一类群体属于刚步入社会，对于出行、旅行、自驾游等需求很大，因此会频繁的使用地图导航软件；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;这类群体的用户生活状态不是特别文档，流动性较强，因此对于地域的熟悉度没有那么高，因此对于地图导航需求很大；&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;针对30岁左右的用户，他们这对打车的需求很大，因此这一部分的用户也是地图导航的主要使用者。&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;从经济收入来看&lt;/strong&gt;：  &lt;br /&gt;
消费水平看，导航软件的使用用户消费水平都是中等消费水平的用户10K一下收入群体占据高德地图80%。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结：整体来看，高德的用户大都还是年轻群体，属于Z时代的用户居多，这一类用户针对出行，旅行，驾车等需求较大，男性群体对于位置导航的掌控也是居多，这也一方面说明了高德再提供附加功能上面可以根据据这一类用户进行精准推送给，深挖用户需求，从而完善产品。&lt;/p&gt;

&lt;h4 id=&quot;3-核心用户&quot;&gt;3. 核心用户&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、车主&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;车主在城市经常遇到交通拥堵，在陌生的地方不熟悉路线、找不到加油站、停车场等情况的时候，这个时候就需要手机地图提供实时路况、地图规划、周边加油站停车场搜索等各种导航功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、大众用户&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用户对于公交地铁，打车服务、地点搜索，路线规划、景区信息等需求不断增加，因此对于手机地图的使用也逐渐成为常态化。&lt;/p&gt;

&lt;h4 id=&quot;4-用户场景&quot;&gt;4. 用户场景&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;①场景一：大学生&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本属性：男，20岁&lt;/p&gt;

&lt;p&gt;用户行为：周末喜欢外出游玩&lt;/p&gt;

&lt;p&gt;用户特征：大学生，喜欢去不一样的地方游玩&lt;/p&gt;

&lt;p&gt;使用场景：小明是一个在校大学生，初次来到大城市上学，对身边的环境很是好奇，对周围的景区也特别感兴趣，但是自己又不知道怎么去，找不到地方，这个时候，同学小军，给他推荐了高德地图，高德地图可以直接查找自己想找的位置，然后规划路线，根据不同的出项方式规划时间，定位数据非常准确，小明很快就根据位置信息找到了自己想去的景区，然后愉快的玩耍。&lt;/p&gt;

&lt;p&gt;需求：公交查询，到站提醒，周边搜索，室内地图，打车服务，景点搜索。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;②场景二：司机&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本属性：男，35岁&lt;/p&gt;

&lt;p&gt;用户行为：日常开网约车&lt;/p&gt;

&lt;p&gt;用户特征：网约车司机，长期开车&lt;/p&gt;

&lt;p&gt;使用场景：罗师傅是一个网约车司机，日常就是在各个网约车平台接单，日常担心接乘客和送乘客时间过长问题，因此就需要时刻规划路线，并且对于上下班这种高峰期往往把握不好那条路可以避开高峰路段问题，因此很是需要可以提前知道路况，恰巧有一天发现同事在使用高德地图，发现高德地图可以看到道路拥挤状况以及最短时间路程规划，于是罗师傅开始使用高德地图，每次都以最短时间接到客户，并且送单时间也很快，于是罗师傅变成了高德的核心用户。&lt;/p&gt;

&lt;p&gt;需求：路线规划，拥挤提醒，红绿灯提醒，加油站寻找，速度提醒，摄像头提醒。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;③场景三：旅行者&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;基本属性：男，26岁&lt;/p&gt;

&lt;p&gt;用户行为：异地旅行&lt;/p&gt;

&lt;p&gt;用户特征：喜欢在不同地方旅行&lt;/p&gt;

&lt;p&gt;使用场景：小天是一个忠实旅游爱好者，喜欢在不同的城市旅游，但是自己的经济花销有限，因此他每次都要规划好自己的行程，包括坐公交的费用，他偶然在一次旅行时候发现高德地图不仅针对公交路线十分明确，他还可以实时的更新自己的位置，还剩几站路，此次下次换乘提醒，步行距离导航等等，十分详细这对小天异地旅行来说简直不要太完美，因此小天很快就成为了高德地图的忠实用户。&lt;/p&gt;

&lt;p&gt;需求：地点搜索，路线规划，酒店、餐饮预定、实时路况，实时公交。&lt;/p&gt;

&lt;p&gt;总结：从用户在使用高德地图不同的场景中可以看出来，高德地图是针对对于出行，旅行，驾车等有需求的人提供的导航功能，有这一类需求的用户大多是年轻群体，他们的消费理念是属于年轻化，有活力的消费群体，给他们提供导航服务就应该十分有效率，高德在这一块做的还是非常高效。&lt;/p&gt;

&lt;h4 id=&quot;5-用户痛点&quot;&gt;5. 用户痛点&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;1、道路不熟悉，找不到路（主要针对道路陌生用户）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;现在交通路线越来越便利，用户出行需求变大，但是由于道路交通复杂，用户来到一个陌生地区，不知道自己应该如何到达自己的目的地，因此很需要手机地图来提供目的地查找，路线规划等详情信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2、道路交通拥挤，躲避不开（主要针对高峰期出行用户）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;主要针对的是司机，开车上下班的上班族，此类用户在面对出行高峰期的时候，常常遇到道路拥挤，堵车的情况，由于无法提前知道路况，所以经常在路上耽误较长时间，因此用户对于道路拥挤的情况想要一个手机地图产品去解决这样一个痛点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3、找不到加油站停车场等建筑（针对场景多变，道路不熟悉）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于自驾出行对于路况不清楚的情况，常常会出现找不到加油站和停车场这些场所而带来很大不便，所以手机地图对于一些标志性的场景都会进行一个明显的标注，手机地图可以很好的解决用户的这类痛点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4、找到地点之后，想要快速打车（想要快速打车）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;地图给用户带来最大的便捷就是可以快速定位目的地，但是有很多地图应用查到目的地之后，还需要找另外一个软件进行重新定位打车，有时候会出现定位出现偏差的情况，因此手机地图直接可以连接打车服务，定位之后可以一键叫车，对于用户来说很是方便。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5、公交车老是等不到，不知道时间（想要公交路线规划的用户）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;交通发达导致用户出行方式变得多样化，很多用户习惯于公交地铁出行，面对不熟悉的场景的时候，往往需要导航来帮助规划路线，此时在站台知道下一班车到哪了，还有多久到，就产生很大的需求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6、找不到周边景区、美食（喜欢景区游玩的用户）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;外出游玩的用户越来越多，对于景区、美食的需求越来越大，并且用户想要在地点打卡，但是找不到地方的用户非常多，对于精准的景区地点，以及游玩攻略，路线规划等需求就越来越大，地图就可以通过精准定位来很好的解决用户的这类痛点。&lt;/p&gt;

&lt;p&gt;总结：用户对于使用手机地图的场景越来越多，需求也越来越大，地图需要不断的完善产品的定位、导航、场景信息等大数据以及功能的完善来解决用户在不同场景下的痛点，并且在这基础上去不断的通过加强互联网+导航，以及人工智能导航的新技术的提升，在满足用户能用的基础上，让用户对自己的产品产生更多的好感，让更多的用户认为手机地图好用是非常重要的。&lt;/p&gt;

&lt;h3 id=&quot;四产品分析&quot;&gt;四、产品分析&lt;/h3&gt;
&lt;h4 id=&quot;1-战略层分析&quot;&gt;1. 战略层分析&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447686.png!gorpeln&quot; alt=&quot;20230312165447686&quot; /&gt;&lt;/p&gt;

&lt;p&gt;描述：从产品定位角度来看三者。高德地图借助人工智能技术，进一步深化“互联网+出行”，拓展出行内容；深化“出行+”，全力打造出行生态。百度地图，也是高度应用AI人工智能技术，深化发展服务产品。再看腾讯地图，围绕海量数据和精准导航开展其功能，增加街景地图，特色语音导航（如王者荣耀语音包）等特色功能吸引年轻用户群，同时还逐步探索出行服务内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从战略层角度来看手机地图行业未来发展趋势：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;人工智能+地图&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;随着人工智能、大数据、AR等技 术不断应用于手机地图领域，出 现了无人驾驶、语音导航等技术, 未来，人工智能不再局限于基础 服务，智能服务成为新的发展方 向，通过后台分析为用户提供符 合用户偏好的定制化服务。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;场景化应用&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;我国地理测绘、卫星导航等技术 的进步，以及用户UGC撞集地理 信息，手机地圈的准确性和全面 性大大提升，基于真实地理位置 的手机地图产品基础功能同质化 严重，场景化服务将成为手机地 围 圈平台差异化竞争的关键。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;自动驾驶&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;人工智能技术和国家政策红利。 推动自动驾驶爆发式增长。在此 背景下，地图行业布局高精地图 领域，将地理数据精度提高至分 米级，实时为汽车精确导航&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;区块链&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;数字货币带来区块链项目爆发式增长，其开源技术以及共建共享的核心思想，为手机地图带来新发展，以去中心化模式采集实时地理信息，区块链的去中心化，不可篡改等特性，可以从技术层面保护用户隐私。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结：从手机地图的战略层来看，高德地图是占据这强硬的技术支持，以及国家政策的帮助，为政府提供辅助决策和支持服务，这样给高德进行了一个很好的赋能，高德地图借助人工智能技术，进一步深化“互联网+出行”，拓展出行内容；深化“出行+”，全力打造出行生态；以后手机的地图的发展趋势应该是更加完善的场景化的应用，加上现在国家致力发展新能源汽车行业，包括自动驾驶等一些技术，高德地图应该在这些方面再去深入研究发展。&lt;/p&gt;

&lt;h4 id=&quot;2-结构层分析&quot;&gt;2. 结构层分析&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447687.png!gorpeln&quot; alt=&quot;20230312165447687&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;结构图描述：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从一级标题来看：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;首页&lt;/code&gt;界面的内容是用户最关心的核心功能：当前位置、路线、去公司、下班、今日温度，这些基础功能是最基本，也是最贴近用户需求的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;附近&lt;/code&gt;界面的内容主要是包含了基于用户当前位置，周边的一些生活服务，这一点就很人性化；具体来看：饭店、饮品店、娱乐休闲；这些选项，方便在用户确认位置后的第一时间，能够快速直达点击自己所需要的服务。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我的&lt;/code&gt;界面，相当于为用户进行了私人化定制，可以根据自己的日常操作，收藏常用地点，常用路线，了解历史形成信息；一方面方便用户统计过去以往行程、另一方面方便用户管理自己私人专属内容。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;从二级标题来看：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;首页界面含有“唤醒小德”这一选项，通过语音唤醒，增加了软件的方便性、智能性；附近界面含有“消费券”等活动接口，间接达到了引流，引导客户消费到指定商家的目的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;我的&lt;/code&gt;界面含有：点亮城市、打卡地点等一些列“成就”属性内容，为一款地图软件增加了“主人”精神，确实能够达到让客户更有成就这一目的；除此以外，服务项：打车、酒店、景点门票等系列选项，能够一键式实现用户群体的游玩、旅行需要，很是方便；“组队出行“这款功能更是方便了，团队自驾的小伙伴，能够实时查看对方车辆的位置信息。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：高德地图通过“首页”tab将出行相关的工具/功能前置在首页，首页信息全，出行相关功能在首页展开，低频需求在更多工具中可展开，支持首页展示功能/工具的自定义，主次分明，把核心功能放在首要位置，减少用户流失。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：内容多，因此操作就较为复杂，百度地图和腾讯地图均将详细工具功能折叠在二级页面，首页简单明了，希望高德地图可以对页面布局以及功能的使用方面再去优化一下。&lt;/p&gt;

&lt;p&gt;总结：分析高德的结构层可以看出来，高德在首页界面的内容是用户最关心的核心功能：当前位置、路线、去公司、下班、今日温度，这些基础功能是最基本，也是最贴近用户需求的。而二级界面“唤醒小德”“消费券”等接口也在不断增加用户停留使用时长，增加用户粘性都有很好的效果。&lt;/p&gt;

&lt;h4 id=&quot;3-产品体验分析&quot;&gt;3. 产品体验分析&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（1）步行导航功能体验&lt;/strong&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447688.png!gorpeln&quot; alt=&quot;20230312165447688&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;页面描述&lt;/strong&gt;：进入app，地图以上北下南方式展现，用户的图标由一“圆形”和“指南标”串联组成，“指南标”会随着人的朝向而实时转动，这一设计方便人确定了此时此刻的方位朝向，方便下一步的路线导航；搜索地址后，会出现搜索地址的位置信息，之后点击路线即可进入导航界面，导航界面有刷新定位和时间，距离显示，再点击导航，便开始以第一视角的导航，周围的建筑以立体的形式展现，箭头也是随着手机方向进行改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;功能描述&lt;/strong&gt;：首先进入APP，系统给会自动根据GPS给自己定位，首先是地图显示用户所处的位置，以及周边的建筑和建筑名称，下面有一个搜索栏，用户可以填入自己想要知道的位置，填写完位置之后，进行搜索，若搜索成功则会跳转到该位置界面，再点击路线，高德则会对用户当前的位置与目的地的位置进行路线规划，此时会显示路线、距离、时长等，用户点击开始导航，然后就会跳转到详细导航界面，到达目的地时，软件自动结束导航。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：操作便捷快速，位置信息十分准确，路线规划也十分准确，预估时长精准无误，界面干净，用户操作起来没有明显障碍。搜索页面展示历史搜索记录，用户可选择历史记录搜索目的地，减少步长，提升用户体验；&lt;/p&gt;

&lt;p&gt;搜索页上方有类别选项（如美食、酒店等），点击后跳转至相应列表，可筛选和自定义排序，用于行为明确但目标模糊的场景（如明确要吃饭，但对去哪家餐厅吃不明确。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：当无历史记录（被清空或新用户未产生搜索记录）或历史记录过少时，搜索框下方为空。&lt;/p&gt;

&lt;p&gt;优化建议：搜索框下方为空时可展示附近推荐地点、热门地点、用户设定内容（如家/公司）等，帮助用户更快完成目标地址查找。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（2）公交地铁导航功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230312165447689.png!gorpeln&quot; alt=&quot;20230312165447689&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;功能描述&lt;/strong&gt;：用户进入APP，定位自己位置之后，用户再搜索栏中搜索目的地，然后选择公交地铁的出行方式出行，平台根据出行时间的长短进行排序，并且也会考虑出行费用，然后进行一个推荐序列供用户选则，用户点击选中的路线之后会跳转到详细路线里面，此时会出现用户到目的地的路线规划，以及到站台的步行路线导航，还有途经的每一站，怕错过的乘客还可以选择下车提醒，到达目的地之后导航会自动关闭。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：从定位来看，用户和目的地的位置十分准确，不存在导航错误的情况；从路线规划上来看，数据详细，其中步行导航的时间和坐车时间都是详细的展示给用户，用户可以灵活的安排自己的时间；从人性化角度来看，怕用户找不到上车点于是加上了步行导航，怕用户做过车站，于是加了下车提醒按钮。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：针对特定的时间，比如上下班的高峰期，以及节假日等路上堵车的时候，公交车的速度会明显降低，所以用户不能明确的知道自己需要多久到达目的地的，因此应该尽可能去推荐用户使用地铁出行方式，如果没有地铁可以提前对用户进行提醒。&lt;/p&gt;

&lt;p&gt;优化建议：根据路况以及人流量，进行深度计算用户所需时间，给用户提供更加准确的路线规划。&lt;/p&gt;

&lt;p&gt;总结：以上两个功能可以看得出来高德地图的导航功能，能够较好地满足驾车出行要求，路况实时更新，时间预估准确。高德可以考虑增加一些细节优化，丰富地图内容，更改车主菜单选项、提高出行方案的合理性，在用户体验上更好。&lt;/p&gt;

&lt;h3 id=&quot;五总结&quot;&gt;五、总结&lt;/h3&gt;
&lt;h4 id=&quot;1-swot分析&quot;&gt;1. SWOT分析&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;【S】优势&lt;/p&gt;

    &lt;p&gt;拥有强大的后援支持，专业的测绘团队，软件研发和产品化的能力强优质的电子地图数据库，完备的生产链，产品多样化十年专业地图服务，经验丰富&lt;/p&gt;

    &lt;p&gt;高德是全国唯一拥有航空摄影测绘产能的导航地图供应商。公司综合了高精度的航空摄 影采集，车辆采集、步行采集等多种数据采集手段，保障了地图数据的全面性、精确性 和深入性。高德的地图覆盖范围和PDL 数据在国内处于领先地位。其09版地图数据中全国道路里程数达到235万公里,兴趣点多达1250万个,一项数值位列全国第一高德的优势在于，卓越的地图表现力为了满足不断提升的导航和位置服务需求，高德在地图表现力方面进行了持续的大规模 投入。业界领先的市街图、实景路口扩大图、3D地标和城市等，将显若提升用户的使用体验。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【W】劣势&lt;/p&gt;

    &lt;p&gt;地图相对标准化，区分度小，资源整合程度较低，相比较携程美团，在本地生活这一块的业务具有明显差异。&lt;/p&gt;

    &lt;p&gt;商场内导航不准确、难用；实时公交覆盖不全；酒店预订需跳转到APP，且价格更新不及时；分叉路口等场景提醒不及时；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【O】机遇&lt;/p&gt;

    &lt;p&gt;消费者对地图的刚性需求，商户对位置相关的需要增强，阿里的资金技术信息支持，中国汽车导航的装配率较低。&lt;/p&gt;

    &lt;p&gt;以出行交通为核心功能的应用，同样具备丰富的延伸空间，包括生活服务、共享出行、电商、O2O等诸多行业均可衍生出对地图服务的密集需求，如此前北京针对部分严重拥堵路段，实施的疏导交通拥堵类app便是基于地图类功能模块以及拥堵大数据进行开发生成的。&lt;/p&gt;

    &lt;p&gt;目前，地图功能在app中应用十分广泛，摩拜、美团、携程等各种生活服务类app，均需调用百度、高德等地图API模块，并加以优化来满足自身的业务需求;这也是当下API的优势所在，随着API经济的崛起，越来越多的第三方服务商将自己的核心服务向外界开放，这也使得企业在规划移动产品时，能够将更多的精力放在产品本身。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;【T】威胁&lt;/p&gt;

    &lt;p&gt;与同质企业竞争十分激烈，传统导航产品的盗版问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-总结&quot;&gt;2. 总结&lt;/h4&gt;
&lt;p&gt;高德地图致力于成为用户“出行”的首选APP。从各种交通方式的导航、延伸到出行过程中的具体问题的解决，如限行、电子眼的提醒、打车、公交乘车码等，丰富用户出行场景。&lt;/p&gt;

&lt;p&gt;另外还具备酒店、美食等附近地点的查找和推荐，进一步解决用户只有需求（如吃饭）无明确地点场景下的出行问题。满足各年龄段不同用户的不同出行需求，也因此成为了用户活跃量最大的地图app。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;将地图类的APP分两条主线来看：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;导航&lt;/p&gt;

    &lt;p&gt;地图类产品最核心的功能就是导航，帮助用户从一点尽可能快地、安全地到达另一点。这也是用户最基本地需求。地图类产品其实都在基于现实生活中最真实的交通出行需求做产品设计，比如包含尽可能多的出行方式，为用户提供最智能优化的出行方案。同时，这其中也在围绕导航做一些个性化的功能。比如导航设置时提供多样化的选择，满足用户听觉和视觉的双重用户体验。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相关的内容和服务&lt;/p&gt;

    &lt;p&gt;这也是地图类产品基于位置所做的功能，根据用户输入的目的地，挖掘具体场景下的需求。比如用户导航的目的地可能是家和公司，这是最基本的日常通勤场景；周末时候的休闲娱乐，可能去KTV、游乐园；周末附近的自驾游场景；长途旅游场景；日常的购物场景等等。基于这些不同的场景，可以为用户提供相关的内容和服务。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里也可以分为通用的和特定场景下的。通用的比如停车场推荐，营业时间、地点介绍信息，附近美食推荐、酒店推荐等等；特定场景下的比如火车站、景点内会有人流量统计，游玩时会有行程推荐、攻略推荐等等。&lt;/p&gt;

&lt;p&gt;所以除了加大力度研发自己的硬性技术，增加自己的核心竞争力，也可以将相关的内容和服务做到更优秀，让用户在使用产品的时候不能能够满足能用心理还能让用户产生好用，想用的心理。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>30张高清地图全面解读中国地理</title>
        <link>https://gorpeln.top/article/16755875711</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16755875711</guid>
        <pubDate>2023-02-05</pubDate>
        <description>&lt;h3 id=&quot;1中国政区地图&quot;&gt;1、中国政区地图&lt;/h3&gt;
&lt;p&gt;中国行政区划由省级行政区、地级行政区、县级行政区、乡级行政区组成。&lt;/p&gt;

&lt;p&gt;省级行政区：23个省、5个自治区、4个直辖市、2个特别行政区，共34个省级行政区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931151.png!gorpeln&quot; alt=&quot;20230205165931151&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2中国地形图&quot;&gt;2、中国地形图&lt;/h3&gt;
&lt;p&gt;中国地形地势西高东低，呈阶梯状分布；地形多种多样，山区面积广大。&lt;/p&gt;

&lt;p&gt;地势西高东低，向海洋倾斜，一方面有利于海洋上湿润气流深入内地，形成降水；另一方面使许多大河滚滚东流，沟通了东西交通，方便了沿海和内地的经济联系。河流自西向东，逐级下降，河流落差大，水能蕴藏丰富。&lt;/p&gt;

&lt;p&gt;在中国辽阔大地上，有雄伟的高原、起伏的山岭、广阔的平原、低缓的丘陵，还有四周群山环抱、中间低平的大小盆地。多种多样的地形为因地制宜，发展农、林、牧、副提供有利条件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931152.png!gorpeln&quot; alt=&quot;20230205165931152&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3中国地势三级阶梯示意图&quot;&gt;3、中国地势三级阶梯示意图&lt;/h3&gt;
&lt;p&gt;我国地势西高东低，呈三级阶梯状逐级下降，阶梯状分布特点，使我国大多数河流为自西向东。&lt;/p&gt;

&lt;p&gt;阶梯第一级主要分布在青藏高原附近，海拔在4000米以上。&lt;/p&gt;

&lt;p&gt;阶梯第二级主要分布在我国主要高原，如内蒙古高原，黄土高原，云贵高原，海拔1-2千米。&lt;/p&gt;

&lt;p&gt;阶梯第三级主要分布在我国主要平原，海拔500米以下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931153.png!gorpeln&quot; alt=&quot;20230205165931153&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4中国地理分区图&quot;&gt;4、中国地理分区图&lt;/h3&gt;
&lt;p&gt;中国四大区域：西北地区、北方地区、南方地区、青藏地区四大地形区域。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931154.png!gorpeln&quot; alt=&quot;20230205165931154&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931155.png!gorpeln&quot; alt=&quot;20230205165931155&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5中国三大自然区内部差异&quot;&gt;5、中国三大自然区内部差异&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931156.png!gorpeln&quot; alt=&quot;20230205165931156&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6中国重要自然地理界线&quot;&gt;6、中国重要自然地理界线&lt;/h3&gt;
&lt;p&gt;中国一、二级阶梯界线是昆仑山、阿尔金山、祁连山、横断山脉；二、三级阶梯界线为大兴安岭、太行山、巫山、雪峰山。季风区与非季风区界线是大兴安岭、阴山、贺兰山、巴颜喀拉山、冈底斯山，该线西北为非季风区，东南为季风区。&lt;/p&gt;

&lt;p&gt;秦岭——淮河一线是一条我国重要地理分界线，包括南北方分界线，800mm等降水量，湿润区与半湿润区界线，旱作水田分界线，亚热带与暖温带分界线，1月平均气温0°C等温线等。400mm等降水量线还为半湿润半干旱、农耕畜牧、暖温带中温带、森林草原、黄土高原与内蒙古高原分界线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931157.png!gorpeln&quot; alt=&quot;20230205165931157&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7中国气候类型分布图&quot;&gt;7、中国气候类型分布图&lt;/h3&gt;
&lt;p&gt;中国幅员辽阔，跨纬度较广，距海远近差距较大，加之地势高低不同，地貌类型及山脉走向多样，因而气温、降水的组合差别很大，形成了各地多种多样的气候。从气候类型上看，东部属季风气候，西北部属温带大陆性干旱气候，青藏高原属高寒气候。&lt;/p&gt;

&lt;p&gt;中国的气候具有夏季高温多雨、冬季寒冷少雨、高温期与多雨期一致的季风气候特征。中国受冬、夏季风交替影响的地区广，是世界上季风最典型、季风气候最显著的地区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931158.png!gorpeln&quot; alt=&quot;20230205165931158&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8中国干湿分区图&quot;&gt;8、中国干湿分区图&lt;/h3&gt;
&lt;p&gt;我国干湿地区主要根据年降水量分布。主要分布如下：&lt;/p&gt;

&lt;p&gt;800mm年等降水量线：以秦岭-淮河为界，以南为湿润区，以北为半湿润区；&lt;/p&gt;

&lt;p&gt;400mm年等降水量线：以大兴安岭-长城为界，向西南，经青藏高原到冈底斯山，划分半湿润区和半干旱区；&lt;/p&gt;

&lt;p&gt;200mm年等降水量线：以内蒙古中部——贺兰山——祁连山经青藏高原为界，划分半干旱区和干旱区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931159.png!gorpeln&quot; alt=&quot;20230205165931159&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931160.png!gorpeln&quot; alt=&quot;20230205165931160&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;9中国年降水量分布图&quot;&gt;9、中国年降水量分布图&lt;/h3&gt;
&lt;p&gt;中国年降水量空间分布的规律是：从东南沿海向西北内陆递减。中国降水主要是由夏季东南季风带来，东南季风为中国带来太平洋水汽，使得东南沿海地区成为中国年降水量最为丰富地区。西北地区由于深居内陆，距海遥远，成为中国年降水量最少地区。&lt;/p&gt;

&lt;p&gt;从中国年降水量分布图可看出：800毫米等降水量线大致在淮河北—秦岭—青藏高原东南边缘一线；400毫米等降水量线大致在大兴安岭—张家口—兰州—拉萨—喜马拉雅山东南端一线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931161.png!gorpeln&quot; alt=&quot;20230205165931161&quot; /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931162.png!gorpeln&quot; alt=&quot;20230205165931162&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;10中国东部锋面雨带的移动&quot;&gt;10、中国东部锋面雨带的移动&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931163.png!gorpeln&quot; alt=&quot;20230205165931163&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11中国七月气温分布图&quot;&gt;11、中国七月气温分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931164.png!gorpeln&quot; alt=&quot;20230205165931164&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12中国一月平均气温分布图&quot;&gt;12、中国一月平均气温分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931165.png!gorpeln&quot; alt=&quot;20230205165931165&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13中国水系分布图&quot;&gt;13、中国水系分布图&lt;/h3&gt;
&lt;p&gt;中国是世界上河流最多的国家之一，有许多源远流长的大江大河，河湖地区分布不均，内外流区域兼备。中国外流区与内流区界线大致是：北段大体沿着大兴安岭—阴山—贺兰山—祁连山（东部）一线，南段沿着巴颜喀拉山—冈底斯山一线，这条线东南部是外流区，约占全国总面积2/3，河流水量占全国河流总水量95%以上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931166.webp!gorpeln&quot; alt=&quot;20230205165931166&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;14中国自然植被分布图&quot;&gt;14、中国自然植被分布图&lt;/h3&gt;
&lt;p&gt;我国疆域辽阔，植被类型十分丰富。主要划分为8种：针叶林、针阔混交林、温带草原区、温带荒漠区、温带落叶阔叶林区、亚热带常绿阔叶林区、热带季雨林/雨林区、青藏高原高寒植被区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931167.png!gorpeln&quot; alt=&quot;20230205165931167&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;15中国土地资源分布图&quot;&gt;15、中国土地资源分布图&lt;/h3&gt;
&lt;p&gt;中国土地资源有四个基本特点：绝对数量大，人均占有少；类型复杂多样，耕地比重小；利用情况复杂，生产力地区差异明显；地区分布不均，保护和开发问题突出。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931168.png!gorpeln&quot; alt=&quot;20230205165931168&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;16中国水资源分布图&quot;&gt;16、中国水资源分布图&lt;/h3&gt;
&lt;p&gt;河流和湖泊是中国主要的淡水资源。中国水资源的分布情况是南多北少，而耕地的分布却是南少北多。水、土资源配合欠佳的状况，进一步加剧了中国北方地区缺水的程度。中国人均径流量为2200立方米，是世界人均径流量的24.7%。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931169.png!gorpeln&quot; alt=&quot;20230205165931169&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;17中国海洋资源分布图&quot;&gt;17、中国海洋资源分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931170.png!gorpeln&quot; alt=&quot;20230205165931170&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;18中国矿产资源分布图&quot;&gt;18、中国矿产资源分布图&lt;/h3&gt;
&lt;p&gt;中国幅员广大，地质条件多样，矿产资源丰富，已探明储量的有157种。其中钨、锑、稀土、钼、钒和钛等的探明储量居世界首位。煤、铁、铅锌、铜、银、汞、锡、镍、磷灰石、石棉等的储量均居世界前列。中国矿产资源分布的主要特点是，地区分布不均匀。如铁主要分布于辽宁、冀东和川西，西北很少；煤主要分布在华北、西北、东北和西南区，其中山西、内蒙古、新疆等省区最集中，而东南沿海各省则很少。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931171.png!gorpeln&quot; alt=&quot;20230205165931171&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;19中国主要非能源矿产分布图&quot;&gt;19、中国主要非能源矿产分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931172.png!gorpeln&quot; alt=&quot;20230205165931172&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;20中国新能源分布图&quot;&gt;20、中国新能源分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931173.png!gorpeln&quot; alt=&quot;20230205165931173&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21中国主要火山地震分布图&quot;&gt;21、中国主要火山地震分布图&lt;/h3&gt;
&lt;p&gt;我国地处全球两大地震带之间，是一个多地震国家。地震带主要分布在：东南—台湾和福建沿海一带，华北—太行山沿线和京津唐渤地区，西南—青藏高原、云南和四川西部，西北—新疆和陕甘宁部分地区。&lt;/p&gt;

&lt;p&gt;中国的火山，约660座，其中绝大部分是死火山。活火山和休眠火山主要分布在台湾省、昆仑山区、黑龙江省、长白山和云南腾冲等地。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931174.png!gorpeln&quot; alt=&quot;20230205165931174&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22中国水灾分布图&quot;&gt;22、中国水灾分布图&lt;/h3&gt;
&lt;p&gt;我国洪涝灾害总体呈现出夏多冬少、东多西少，沿海多、内陆少，平原湖区多、高原山地少等分布特点。我国洪涝灾害的高发区集中在广西东南部、广东沿海、海南、浙江沿海以及浙赣皖交界处、辽宁、四川的局部地区。我国受暴雨洪水威胁的主要地区分布在长江、黄河、淮河、海河、珠江、松花江、辽河等7大江河下游和东南沿海地区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931175.png!gorpeln&quot; alt=&quot;20230205165931175&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23中国旱灾分布图&quot;&gt;23、中国旱灾分布图&lt;/h3&gt;
&lt;p&gt;我国是世界上主要的干旱国家之一，干旱区的面积约为280万平方公里，半干旱和半湿润易旱区的面积约为213万平方公里，主要分布在昆仑山——秦岭——淮河一线以北，所以干旱是西北区最主要的气候特征和自然灾害。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931176.png!gorpeln&quot; alt=&quot;20230205165931176&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24中国沙尘暴灾害分布图&quot;&gt;24、中国沙尘暴灾害分布图&lt;/h3&gt;
&lt;p&gt;我国的沙尘暴主要发生在北方地区，其中南疆盆地、青海西南部、西藏西部及内蒙古中西部和甘肃中北部是沙尘暴的多发区。春季是中国沙尘暴多发季节，4月最多，占全年的22.7%。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931177.png!gorpeln&quot; alt=&quot;20230205165931177&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25中国泥石流滑坡崩塌灾害分布&quot;&gt;25、中国泥石流、滑坡崩塌灾害分布&lt;/h3&gt;
&lt;p&gt;我国泥石流、滑坡等地质灾害主要分布在我国的中西部，以西南地区最为集中，主要的地形区有云贵高原等。我国西南部地区高原、山区地形起伏较大，加上降雨量相对较多而且集中，雨水侵蚀增加了滑坡的下滑力，形成不稳定的区域，因而滑坡和泥石流灾害频发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931178.png!gorpeln&quot; alt=&quot;20230205165931178&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;26中国气象灾害分布图&quot;&gt;26、中国气象灾害分布图&lt;/h3&gt;
&lt;p&gt;中国地域辽阔，东部处于东亚季风区，而西部地处内陆，天气气候复杂，是世界上受气象灾害影响是严重的国家之一。我国的气象灾害主要特点：&lt;/p&gt;

&lt;p&gt;普遍性。从时间和空间分布上看，每年都有灾，无处没有灾，旱、涝灾害最为频繁。&lt;/p&gt;

&lt;p&gt;区域性。总体看来，北方旱多，南方涝多。旱区主要分布在黄淮海地区及黄土高原，洪涝主要发生在珠江、长江中下游地区及淮河流域等地。&lt;/p&gt;

&lt;p&gt;季节性。春季往往南涝北旱，盛夏往往南旱北涝。&lt;/p&gt;

&lt;p&gt;持续性。同一种灾害常连季出现。如华北常出现春夏连旱或伏秋连旱，长江中下游易出现伏秋连旱，华南常会冬春连旱。&lt;/p&gt;

&lt;p&gt;交替性。不同的气象灾害常交替出现，如旱、涝交替出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931179.png!gorpeln&quot; alt=&quot;20230205165931179&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;27中国主要民族分布图&quot;&gt;27、中国主要民族分布图&lt;/h3&gt;
&lt;p&gt;中国自古以来是一个多民族国家。汉族人口比重最大，约占全国人口总数91.51%；其它55个民族总人口偏少，约占全国总人口8.49%，故称其为少数民族。&lt;/p&gt;

&lt;p&gt;中国各民族分布的特点是：大杂居、小聚居、相互交错居住。中国少数民族人口虽少，但分布很广，主要分布在内蒙古、新疆、宁夏、广西、西藏、云南、贵州、青海、四川、甘肃、黑龙江、辽宁、吉林、湖南、湖北、海南、台湾等省、自治区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931180.png!gorpeln&quot; alt=&quot;20230205165931180&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;28中国旅游资源分布图&quot;&gt;28、中国旅游资源分布图&lt;/h3&gt;
&lt;p&gt;中国自然旅游资源，以名山秀水、山水风光最为重要。如五岳名山（东岳泰山、西岳华山、北岳恒山、南岳衡山、中岳嵩山），四大佛教名山（五台山、九华山、普陀山、峨眉山）和景色奇绝的黄山、庐山、石林等；桂林山水、长江三峡等；杭州西湖美景、无锡太湖风光、海南三亚的天涯海角、云南的大理、丽江、西双版纳和台湾日月潭湖光山色等，都是闻名的旅游胜地。&lt;/p&gt;

&lt;p&gt;人文旅游景观有有八大古都（西安、洛阳、安阳、南京、开封、杭州、北京、郑州）、万里长城、京杭大运河、北京故宫和皇家陵园，西安秦始皇兵马俑，南京明孝陵、中山陵，苏州园林建筑，承德避暑山庄，洛阳龙门石窟，敦煌石窟壁画等，都举世闻名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931181.png!gorpeln&quot; alt=&quot;20230205165931181&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;29中国世界遗产分布图&quot;&gt;29、中国世界遗产分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931182.png!gorpeln&quot; alt=&quot;20230205165931182&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;30中国环境保护分布图&quot;&gt;30、中国环境保护分布图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230205165931183.png!gorpeln&quot; alt=&quot;20230205165931183&quot; /&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>下载神器：Aria2搭建</title>
        <link>https://gorpeln.top/article/16726547033</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16726547033</guid>
        <pubDate>2023-01-02</pubDate>
        <description>&lt;h3 id=&quot;aria2简介&quot;&gt;Aria2简介&lt;/h3&gt;

&lt;p&gt;Aria2是一款同时支持多线程、P2P下载、BT下载的多功能下载工具。其速度，同样取决于网速和资源质量。但是一般情况，多线程下载，总是比普通浏览器下载、wget下载快很多，并且Aria2还支持远程传递下载。&lt;/p&gt;

&lt;h3 id=&quot;为什么要用aria2&quot;&gt;为什么要用Aria2&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;传递下载&lt;/code&gt;&lt;br /&gt;
其实，说传递下载有点不准确，其实就是RPC传递下载链接。如：你本地有资源，但是你要外出，你可以通过RPC，直接传递本地下载资源（响应头、下载链接）到服务器上的Aria2，达到“离线下载”的目的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;稳定性&lt;/code&gt;&lt;br /&gt;
使用浏览器下载，如果网络变更一次，那么可能就会直接下载失败。但是，如果使用Aria2下载，会自动等待网络重新连接，且对已经下载好的部分，支持断点续传。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;多线程&lt;/code&gt;&lt;br /&gt;
Aria2作为一个多线程下载器，就不多说了。官方版本Aria2最大16线程下载普通资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;磁力&amp;amp;种子&lt;/code&gt;&lt;br /&gt;
Aria2可以下载磁力链接（magnet）资源，以及种子资源（.torrent）。相对于多了一种下载路径。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;macos上搭建aria2&quot;&gt;macOS上搭建Aria2&lt;/h3&gt;
&lt;h4 id=&quot;homebrew安装aria2&quot;&gt;Homebrew安装Aria2&lt;/h4&gt;
&lt;p&gt;因为有brew，所以只需要同步Aria2文件到本地即可：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install aria2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230102181823583.png!gorpeln&quot; alt=&quot;20230102181823583&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;配置aria2conf&quot;&gt;配置aria2.conf&lt;/h4&gt;
&lt;p&gt;在终端输入：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 进入用户家目录
cd ~
# 创建Aria2的配置目录
mkdir .aria2
# 进入目录内
cd .aria2
# 获取当前终端绝对路径
pwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;获取终端当前地址，我的是：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/gorpeln/.aria2&lt;/code&gt;&lt;br /&gt;
创建aria2.conf文件&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;touch aria2.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打开这个文件并配置（你可以使用命令open ~/.aria2/aria2.conf打开或者直接用vim），然后写入Aria2的配置，你可以使用我的aria2配置：&lt;/p&gt;

&lt;p&gt;下载:&lt;a href=&quot;https://gorpeln.lanzoul.com/iPUZN156hkfa&quot;&gt;https://gorpeln.lanzoul.com/iPUZN156hkfa&lt;/a&gt; 密码:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bys2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;之后，&lt;strong&gt;更改其中内容&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;dir：通过Aria2下载的文件，存放地址（绝对路径）&lt;/li&gt;
  &lt;li&gt;on-download-stop：指向配置文件内deleteAria2.sh&lt;/li&gt;
  &lt;li&gt;on-download-complete：同样指向配置文件内deleteAria2.sh&lt;/li&gt;
  &lt;li&gt;dht-file-path：指向配置文件内dht.dat&lt;/li&gt;
  &lt;li&gt;dht-file-path6：同样指向配置文件内dht.dat&lt;/li&gt;
  &lt;li&gt;rpc-secret：设置Aria2验证远程码&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;连接密码，后面连接需要使用&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230102181823584.png!gorpeln&quot; alt=&quot;20230102181823584&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你可以把&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dht.dat&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deleteAria2.sh&lt;/code&gt;移动到/Users/gorpeln/.aria2文件夹内，方便管理。&lt;br /&gt;
macOS上.开头文件为隐藏文件，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;command + shift + .&lt;/code&gt;可以显示隐藏隐藏文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;启动aria2服务&quot;&gt;启动Aria2服务&lt;/h4&gt;
&lt;h5 id=&quot;1直接运行&quot;&gt;1.直接运行&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aria2c --conf-path=&quot;/Users/gorpeln/.aria2/aria2.conf&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样，aria2服务就启动成功了。&lt;/p&gt;

&lt;h5 id=&quot;2写入脚本运行&quot;&gt;2.写入脚本运行&lt;/h5&gt;
&lt;p&gt;新建一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;文本文件.txt&lt;/code&gt;,加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria2c --conf-path=/Users/gorpeln/.aria2/aria2.conf
&lt;/code&gt;，保存后，修改文件的后缀为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aria2.command&lt;/code&gt;,文件直接放在桌面，下次运行直接&lt;strong&gt;双击&lt;/strong&gt;文件即可。&lt;/p&gt;

&lt;h3 id=&quot;aria2具体使用&quot;&gt;Aria2具体使用&lt;/h3&gt;
&lt;h4 id=&quot;一本地使用aria2&quot;&gt;一、本地使用Aria2&lt;/h4&gt;
&lt;h5 id=&quot;1启动aria2主服务&quot;&gt;1.启动Aria2主服务&lt;/h5&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;双击`aria2.command`  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2配置ariang&quot;&gt;2.配置AriaNG&lt;/h5&gt;
&lt;p&gt;下载AriaNG Native：&lt;a href=&quot;https://github.com/mayswind/AriaNg-Native/releases&quot;&gt;AriaNG&lt;/a&gt;，打开即可。&lt;/p&gt;

&lt;h5 id=&quot;3正式下载文件&quot;&gt;3.正式下载文件&lt;/h5&gt;
&lt;p&gt;只需要在AriaNG上，点击新建—将磁力链接/下载链接复制—立即下载即可开始下载。&lt;/p&gt;

&lt;h4 id=&quot;二alist使用aria2&quot;&gt;二、alist使用Aria2&lt;/h4&gt;
&lt;p&gt;首先进入系统后台后，点击其他，配置Aria2相关信息。
&lt;img src=&quot;https://img.gorpeln.top/blog/20230102181823585.png!gorpeln&quot; alt=&quot;20230102181823585&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后返回到alist前台。点击小齿轮填写aria2参数。
&lt;img src=&quot;https://img.gorpeln.top/blog/20230102181823586.png!gorpeln&quot; alt=&quot;20230102181823586&quot; /&gt;&lt;/p&gt;

&lt;p&gt;到处，在alist中，我们的aria2就配置完成了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20230102181823587.png!gorpeln&quot; alt=&quot;20230102181823587&quot; /&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Alist安卓手机的配置</title>
        <link>https://gorpeln.top/article/16718726252</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16718726252</guid>
        <pubDate>2022-12-24</pubDate>
        <description>&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;Alist 有这么几个好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装方便快捷；&lt;/li&gt;
  &lt;li&gt;可以配置除本地之外的网盘，如可以添加百度网盘、阿里云盘等；&lt;/li&gt;
  &lt;li&gt;播放视频等可以调用本地播放器，如PC端的PotPlayer，安卓端的MxPlayer；&lt;/li&gt;
  &lt;li&gt;无需 root；&lt;/li&gt;
  &lt;li&gt;支持WebDav。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;安装-termux&quot;&gt;安装 termux&lt;/h3&gt;
&lt;p&gt;termux 现在需要从 f-droid 上下载了，地址为 &lt;a href=&quot;https://f-droid.org/zh_Hans/packages/com.termux/&quot;&gt;https://f-droid.org/zh_Hans/packages/com.termux/&lt;/a&gt;。&lt;br /&gt;
选择最新版下载即可。下载好之后直接安装，能够打开的话，一般来说就没什么问题了，可以进行下一步操作了。&lt;br /&gt;
&lt;img src=&quot;https://img.gorpeln.top/blog/20221224170345603.jpg!gorpeln&quot; alt=&quot;20221224170345603&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;换源&quot;&gt;换源&lt;/h3&gt;
&lt;p&gt;在清华大学镜像站&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/termux/&quot;&gt;https://mirrors.tuna.tsinghua.edu.cn/help/termux/&lt;/a&gt;，复制下图的命令并运行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20221224170345604.png!gorpeln&quot; alt=&quot;20221224170345604&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在回车后，会提示是否继续，输入 y 并回车，会更新源。之后在提示的时候，按下回车，使用默认配置即可。&lt;/p&gt;

&lt;h3 id=&quot;安装-alist&quot;&gt;安装 Alist&lt;/h3&gt;
&lt;p&gt;Alist 的安装较为简单。打开 termux，输入下面的指令直接安装：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkg install alist -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后输入下面的指令开启 alist：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alist server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;配置-alist-存储&quot;&gt;配置 Alist 存储&lt;/h3&gt;
&lt;p&gt;如果使用当前安装 alist 的手机访问 alist，直接在手机浏览器中输入 0.0.0.0:5244 进行访问。进入之后，大概率会看到这个界面：
&lt;img src=&quot;https://img.gorpeln.top/blog/20221224170345605.png!gorpeln&quot; alt=&quot;20221224170345605&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击下面的登录，输入之前的账户和密码。登录成功之后，点击下面的管理，进入管理界面。
&lt;img src=&quot;https://img.gorpeln.top/blog/20221224170345606.png!gorpeln&quot; alt=&quot;20221224170345606&quot; /&gt;&lt;/p&gt;

&lt;p&gt;具体的网盘挂载查看官方文档 &lt;a href=&quot;https://alist.nn.ci/zh/&quot;&gt;https://alist.nn.ci/zh/&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;termux常用命令&quot;&gt;Termux常用命令&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkg search &amp;lt;query&amp;gt;              # 搜索包
pkg install &amp;lt;package&amp;gt;           # 安装包
pkg uninstall &amp;lt;package&amp;gt;         # 卸载包
pkg reinstall &amp;lt;package&amp;gt;         # 重新安装包
pkg update                      # 更新源
pkg upgrade                     # 升级软件包
pkg list-all                    # 列出可供安装的所有包
pkg list-installed              # 列出已经安装的包
pkg show &amp;lt;package&amp;gt;              # 显示某个包的详细信息
pkg files &amp;lt;package&amp;gt;             # 显示某个包的相关文件夹路径
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>GitHub Actions</title>
        <link>https://gorpeln.top/article/16682372627</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16682372627</guid>
        <pubDate>2022-11-12</pubDate>
        <description>&lt;h3 id=&quot;一github-action-简介&quot;&gt;一、GitHub Action 简介&lt;/h3&gt;

&lt;h4 id=&quot;什么是github-action-&quot;&gt;什么是Github Action ?&lt;/h4&gt;
&lt;p&gt;GitHub Actions是一个持续集成和持续交付的平台，它可以帮助你通过自动化的构建（包括编译、发布、自动化测试）来验证你的代码，从而尽快地发现集成错误。github于2019年11月后对该功能全面开放，现在所有的github用户可以直接使用该功能。GitHub 提供 Linux、Windows 和 macOS 虚拟机来运行您的工作流程，或者您可以在自己的数据中心或云基础架构中托管自己的自托管运行器。在使用Github Action之前首先需要了解以下前置知识:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;持续集成/持续交付的概念。&lt;/li&gt;
  &lt;li&gt;Git相关知识。&lt;/li&gt;
  &lt;li&gt;Linux或Windows或macOS脚本相关知识。&lt;/li&gt;
  &lt;li&gt;Yaml基础语法。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;什么是yaml-&quot;&gt;什么是Yaml ?&lt;/h4&gt;
&lt;p&gt;编写Github Action的流程时，需要创建一个workflow工作流，workflow必须存储在你的项目库根路径下的.github/workflows目录中，每一个 workflow对应一个具体的.yml 文件（或者 .yaml）。&lt;br /&gt;
yml是YAML（YAML Ain’t Markup Language）语言的文件，以数据为中心，比properties、xml等更适合做配置文件，主要有以下几个特点:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大小写敏感。&lt;/li&gt;
  &lt;li&gt;使用缩进表示层级关系。&lt;/li&gt;
  &lt;li&gt;缩进只能使用空格，不能用 TAB 字符。&lt;/li&gt;
  &lt;li&gt;缩进的空格数量不重要，只要层级相同的元素左对齐即可。&lt;/li&gt;
  &lt;li&gt;‘#’ 表示注释。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;github-action基本概念&quot;&gt;Github Action基本概念&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;workflow&lt;/code&gt;: 一个 workflow 就是一个完整的工作流过程，每个workflow 包含一组 jobs任务。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;job&lt;/code&gt; : jobs任务包含一个或多个job ，每个 job包含一系列的 steps 步骤。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;step&lt;/code&gt; : 每个 step 步骤可以执行指令或者使用一个 action 动作。&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;action&lt;/code&gt; : 每个 action 动作就是一个通用的基本单元。&lt;/p&gt;

&lt;h4 id=&quot;github-action-的使用限制&quot;&gt;Github Action 的使用限制&lt;/h4&gt;
&lt;p&gt;在使用免费版本的Github Action是有如下限制的:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;作业执行时间&lt;/code&gt; - 工作流中的每个作业最多可以运行 6 小时的执行时间。如果作业达到此限制，该作业将终止且无法完成。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;工作流运行时间&lt;/code&gt; - 每个工作流运行限制为 35 天。如果工作流运行达到此限制，则工作流运行将被取消。此时间段包括执行持续时间以及等待和批准所花费的时间。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;API 请求&lt;/code&gt; - 您可以在一小时内跨存储库中的所有操作执行多达 1000 个 API 请求。如果超出此限制，其他 API 调用将失败，这可能会导致作业失败。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;并发作业&lt;/code&gt; - 可以在帐户中运行的并发作业数取决于 GitHub 计划，如下表所示。如果超出，则任何其他作业都将排队。&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;GitHub 计划&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;并发作业总数&lt;/th&gt;
          &lt;th style=&quot;text-align: center&quot;&gt;最大并发 macOS 作业数&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;自由&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;20&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;专业版&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;40&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;团队&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;60&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;5&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;企业&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;180&lt;/td&gt;
          &lt;td style=&quot;text-align: center&quot;&gt;50&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;作业矩阵&lt;/code&gt; - 作业矩阵每次工作流运行最多可以生成 256 个作业。此限制适用于 GitHub 托管和自托管的运行程序。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;工作流运行队列&lt;/code&gt; - 每个存储库的排队时间间隔不超过 500 个工作流运行，间隔为 10 秒。如果工作流运行达到此限制，则工作流运行将终止且无法完成。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体以最新版官方文档为主:&lt;a href=&quot;https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration&quot;&gt;usage-limits-billing-and-administration&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;二github-action的使用&quot;&gt;二、GitHub Action的使用&lt;/h3&gt;
&lt;h4 id=&quot;workflow&quot;&gt;workflow&lt;/h4&gt;
&lt;p&gt;在项目库根路径下的.github/workflows目录中创建一个.yml 文件（或者 .yaml）:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: hello-github-actions
# 触发 workflow 的事件
on:
  push:
    # 分支随意
    branches:
      - master
# 一个workflow由执行的一项或多项job
jobs:
  # 一个job任务，任务名为build
  build:
    #运行在最新版ubuntu系统中
    runs-on: ubuntu-latest
    #步骤合集
    steps:
      #新建一个名为checkout_actions的步骤
      - name: checkout_actions
        #使用checkout@v2这个action获取源码
        uses: actions/checkout@v2 
      #使用建一个名为setup-node的步骤
      - name: setup-node
        #使用setup-node@v1这个action
        uses: actions/setup-node@v1
        #指定某个action 可能需要输入的参数
        with:
          node-version: &apos;14&apos;
      - name: npm install and build
        #执行执行某个shell命令或脚本
        run: |
          npm install
          npm run build
      - name: commit push
        #执行执行某个shell命令或脚本
        run: |
          git config --global user.email xxx@163.com
          git config --global user.name xxxx
          git add .
          git commit -m &quot;update&quot; -a
          git push
         # 环境变量
        env:
          email: xxx@163.com   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;name&quot;&gt;name&lt;/h4&gt;
&lt;p&gt;Workflow的名字，随便可以设置，就是工作流的名字。如果省略该字段，默认为当前 workflow 的文件名。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: hello-github-actions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;on&quot;&gt;on&lt;/h4&gt;
&lt;p&gt;触发的事件，可以是一个事件数组。
在代码仓库Push时触发:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#push时触发
on: push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以用数组指定多个条件触发:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#push和merge时触发
on: [push, merge]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还可以对条件进行限制触发:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#当master分支push时触发，可以限定分支或标签。
on:
  push:
    branches:
      - master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;完整的事件列表，请查看&lt;a href=&quot;https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows&quot;&gt;官方文档&lt;/a&gt;。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。&lt;/p&gt;

&lt;h4 id=&quot;jobs&quot;&gt;jobs&lt;/h4&gt;
&lt;h5 id=&quot;1job&quot;&gt;1.job&lt;/h5&gt;
&lt;p&gt;jobs表示要执行的一项或多项任务。jobs可以包含一个或多个job，一个job就是一个任务，这个任务可以包含多个步骤(steps):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  job1:
    ...
  job2:
    ...     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是每一个Job都是并发执行的并不是按照申明的先后顺序执行的， 如果多个job 之间存在依赖关系，那么你可能需要使用 needs :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  job1:
  
  job2:
    needs: job1
  
  job3:
    needs: [job1, job2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里的needs声明了job2 必须等待 job1 成功完成，job3必须等待 job1 和 job2依次成功完成。因此，这个 workflow 的运行顺序依次为：job1、job2、job3。needs字段指定当前任务的依赖关系，即运行顺序。&lt;/p&gt;

&lt;h5 id=&quot;2job-runs-on&quot;&gt;2.job-&amp;gt;runs-on&lt;/h5&gt;
&lt;p&gt;runs-on字段指定运行所需要的虚拟机环境。它是必填字段，目前可用的虚拟机如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ubuntu-latest，ubuntu-18.04或ubuntu-16.04。&lt;/li&gt;
  &lt;li&gt;windows-latest，windows-2019或windows-2016。&lt;/li&gt;
  &lt;li&gt;macOS-latest或macOS-10.14。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;指定job的运行环境:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jobs:
  job1:
    runs-on: ubuntu-18.04
  job2:
    runs-on: macos-10.15
  job3:
    runs-on: windows-2019    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;github 会提供一个配置很不错的服务器做为 runner，&lt;br /&gt;
Windows 和 Linux 虚拟机的硬件规格：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;2 核处理器。&lt;/li&gt;
  &lt;li&gt;7 GB 内存。&lt;/li&gt;
  &lt;li&gt;14 GB 固态硬盘空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;macOS 虚拟机的硬件规格：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;3 核处理器。&lt;/li&gt;
  &lt;li&gt;14 GB 内存。&lt;/li&gt;
  &lt;li&gt;14 GB 固态硬盘空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果你有网络时延的需求，（比如推送及拉取镜像时产生的网络时延），你也可以&lt;a href=&quot;https://docs.github.com/zh/actions/using-github-hosted-runners/customizing-github-hosted-runners&quot;&gt;自建runner&lt;/a&gt; 。&lt;/p&gt;

&lt;h5 id=&quot;3job-env&quot;&gt;3.job-&amp;gt;env&lt;/h5&gt;
&lt;p&gt;使用env可以给该任务或者是步骤配置环境变量:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; env:
   name: &quot;gorpeln&quot;
 run: |
   echo $name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;环境变量可以配置在以下地方:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;jobs-&amp;gt;job-&amp;gt;env&lt;/li&gt;
  &lt;li&gt;jobs-&amp;gt;job-&amp;gt;steps.env&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4job-steps&quot;&gt;4.job-&amp;gt;steps&lt;/h5&gt;
&lt;p&gt;steps字段指定每个 Job 的运行步骤，每个job由多个step构成，它会从上至下依次执行。steps可以包含一个或多个步骤，每个 step 步骤可以有:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name&lt;/code&gt;：步骤名称，步骤的名称。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;env&lt;/code&gt;：该步骤所需的环境变量。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id&lt;/code&gt; : 每个步骤的唯一标识符&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uses&lt;/code&gt; : 使用哪个action，这个表示使用别人预先设置好的Actions，比如因为我代码中要用到python，所以就用了actions/setup-python@v1来设置python环境，不用我自己设置了。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;: 指定某个action 可能需要输入的参数。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run&lt;/code&gt;: 执行哪些指令，具体运行什么命令行代码。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;continue-on-error&lt;/code&gt; : 设置为 true 允许此步骤失败job 仍然通过。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeout-minutes&lt;/code&gt; : step 的超时时间。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
name: Sync To Gitee
on: [ push ]
jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
    #创建一个打印环境变量的步骤
    - name: PrintName
      env:
        name: &quot;zhangsan&quot;
      run: |
        echo $name
    #创建一个安装Python环境的步骤    
    - name: SetUpPython
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    #创建一个安装Python包的步骤 
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install bs4
          pip install lxml     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;使用uses指的是这一步骤需要先调用哪个 Action。 Action 是组成工作流最核心最基础的元素。 每个 Action 可以看作封装的独立脚本，有自己的操作逻辑，我们只需要 uses 并通过 with 传入参数即可。 比如 actions/checkout@v2 就是官方社区贡献的用来拉取仓库分支的 Action， 你不需要考虑安装 git 命令工具，只需要把分支参数传入即可。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;5action&quot;&gt;5.Action&lt;/h5&gt;
&lt;p&gt;Github Actions 是GitHub的持续集成服务。持续集成由很多操作组成，比如登录远程服务器，发布内容到第三方服务等等，这些相同的操作完全可以提取出来制作成脚本供所有人使用。GitHub允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用该脚本，这个脚本就是一个Action。如果你需要某种功能的Action可以从GitHub社区共享的action官方市场查找，也可以自己编程Action开源出来供大家使用。既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。 下面都是合法的 action 引用:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;actions/setup-node@74bc508 # 指向一个 commit
actions/setup-node@v1.0    # 指向一个标签
actions/setup-node@master  # 指向一个分支
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;github-actions-中使用密文&quot;&gt;GitHub Actions 中使用密文&lt;/h4&gt;
&lt;p&gt;在持续集成的过程中，我们可能会使用到自己的敏感数据，这些数据不应该被开源并泄露。那么如何才能安全的使用这些敏感数据呢?GithubActions提供了Secrets变量来实现这一效果。我们可以在 github repo 上依次点击 Settings -&amp;gt; Secrets-&amp;gt; Actions-&amp;gt;New repository secret创建一个敏感数据例如:&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSS_KEY_ID&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OSS_KEY_SECRET&lt;/code&gt;， 然后我们就可以在Github Action脚本中使用这一变量了:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-  name:  setup  aliyun  oss
    uses:  manyuanrong/setup-ossutil@master
    with:
        endpoint:  oss-cn-beijing.aliyuncs.com
        access-key-id:  $
        access-key-secret:  $
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里的secret就是一种context，描述 CI/CD 一个workflow 中的上下文信息，使用$语法表示。&lt;a href=&quot;https://docs.github.com/zh/actions/learn-github-actions/expressions&quot;&gt;更多context信息可以参考官方文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;github-action执行结果&quot;&gt;GitHub Action执行结果&lt;/h4&gt;
&lt;p&gt;对于GitHub Action的执行流程我们可以通过repo 上依次点击Actions就可以看到Action的状态和执行结果等信息:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20221112151422378.png!gorpeln&quot; alt=&quot;20221112151422378&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三示例&quot;&gt;三.示例&lt;/h3&gt;
&lt;h4 id=&quot;push代码发送邮件通知&quot;&gt;Push代码发送邮件通知&lt;/h4&gt;
&lt;p&gt;使用GitHub Action实现Push代码发送邮件通知功能。 主要通过 GitHub Action 监听代码 push 事件，并发送邮件（前提是邮箱需要开通 SMTP 服务）。
在项目中 ./github/workflows/ 路径下添加 .yml 或者 .yaml文件，名字可以随便取。在这里我取名为 github-action-email.yml:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: github-action-email
on: [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # 检出代码
    - name: CheckoutRepo
      uses: actions/checkout@v2
    # 获取master分支上最新一条提交的git log  
    - name: GetLastLog
      id: git_log
      uses: Edisonboy/latest-git-log-action@main
      with:
        tag: origin/master
    # 发送邮件    
    - name: Send email
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.qq.com
        server_port: 465
        username: ${-{secrets.MAIL_USERNAME}-}  #删除`-`
        password: ${-{secrets.MAIL_PASSWORD}-}    #删除`-`
        subject: Github Actions job result
        to: ${-{secrets.MAIL_TOUSERNAME}-}    #删除`-`
        from: ${-{secrets.MAIL_USERNAME}-}    #删除`-`
        body: ${-{github.repository}-} push log : ${-{steps.git_log.outputs.log}-}  #删除`-`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;secrets.XXX ： GitHub 允许仓库所有者创建和管理需要保密性的参数。例如邮件的账号和密码都是属于敏感参数。 可以通过项目Settings -&amp;gt; Secrets -&amp;gt; Actions配置密码，在这里我们添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAIL_USERNAME&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAIL_PASSWORD&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAIL_TOUSERNAME&lt;/code&gt; 三个配置参数（注意：这里的密码是指 SMTP 服务的授权密码）。&lt;/p&gt;

&lt;p&gt;上下文：可以访问工作流程运行、运行器环境、作业及步骤相关信息的方式${-{github.repository}-}：当前仓库的的所有者和仓库名称。${-{steps.git_log_outputs.log}-} ：获取step id 为 git_log 的输出集。&lt;/p&gt;

&lt;p&gt;因为我们定义 push 为触发条件，所以当我们只有push 代码后，我们定义的 GitHub Action 才会被执行。然后在 GitHub 上的 Action 能够实时看到当前的执行状态。&lt;/p&gt;

&lt;h4 id=&quot;自动保持-github-提交状态常绿&quot;&gt;自动保持 GitHub 提交状态常绿。&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;name: autogreen

on:
  push:
    branches:
      - main
  schedule:
    - cron: &quot;0 0 * * *&quot;

jobs:
  autogreen:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
  
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Auto green
        run: |
          git config --local user.email &quot;xxx@email.com&quot;
          git config --local user.name &quot;${-{ github.actor }-}&quot;
          git remote set-url origin https://${-{ github.actor }-}:${-{ secrets.GITHUB_TOKEN }-}@github.com/${-{ github.repository }-}
          git pull --rebase
          git commit --allow-empty -m &quot;a commit a day keeps your girlfriend away&quot;
          git push
          # 删除所有  {-{  和  }-}  中的  - 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用 GitHub Actions 的定时任务功能，每隔一段时间自动执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;，提交信息为 “a commit a day keeps your girlfriend away”&lt;br /&gt;
修改 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.email &quot;xxx@email.com&quot;&lt;/code&gt; 为自己的 GitHub 邮箱账号 &lt;br /&gt;
修改&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- cron: &quot;0 0 * * *&quot;&lt;/code&gt;来调整频率&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌───────────── 分钟 (0 - 59)   
│ ┌───────────── 小时 (0 - 23)   
│ │ ┌───────────── 日 (1 - 31)   
│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)   
│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)   
│ │ │ │ │   
│ │ │ │ │  
│ │ │ │ │   
* * * * * 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个时间字段的含义：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;符号&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;描述&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;举例&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;任意值&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* * * * *&lt;/code&gt; 每天每小时每分钟&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;,&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;值分隔符&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1,3,4,7 * * * *&lt;/code&gt; 每小时的 1 3 4 7 分钟&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;- &lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;范围&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1-6 * * * *&lt;/code&gt; 每小时的 1-6 分钟&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;每&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/15 * * * *&lt;/code&gt; 每隔 15 分钟&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;注：由于 GitHub Actions 的限制，如果设置为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;* * * * *&lt;/code&gt; 实际的执行频率为每 5 分执行一次。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;a href=&quot;https://github.com/gorpeln/DailyWork&quot;&gt;https://github.com/gorpeln/DailyWork&lt;/a&gt;&lt;br /&gt;
⚠️ 千万不要 Fork，因为 fork 项目的动态并不会让你变绿 ⚠️&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>如何编写无法维护的代码</title>
        <link>https://gorpeln.top/article/16651247353</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16651247353</guid>
        <pubDate>2022-10-07</pubDate>
        <description>&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;永远不要把自己遇到的问题归因于他人的恶意，这恰恰说明了你自己的无能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;为了造福大众，在 Java 编程领域创造就业机会，兄弟我在此传授大师们的秘籍。这些大师写的代码极其难以维护，后继者就是想对它做最简单的修改都需要花上数年时间。而且，如果你能对照秘籍潜心修炼，你甚至可以给自己弄个铁饭碗，因为除了你之外，没人能维护你写的代码。再而且，如果你能练就秘籍中的全部招式，那么连你自己都无法维护你的代码了！&lt;/p&gt;

&lt;p&gt;你不想练功过度走火入魔吧。那就不要让你的代码一眼看去就完全无法维护，只要它实质上是那样就行了。否则，你的代码就有被重写或重构的风险！&lt;/p&gt;

&lt;h3 id=&quot;总体原则&quot;&gt;总体原则&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Quidquid latine dictum sit, altum sonatur.(随便用拉丁文写点啥都会显得高大上。)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;想挫败维护代码的程序员，你必须先明白他的思维方式。他接手了你的庞大程序，没有时间把它全部读一遍，更别说理解它了。他无非是想快速找到修改代码的位置、改代码、编译，然后就能交差，并希望他的修改不会出现意外的副作用。&lt;/p&gt;

&lt;p&gt;他查看你的代码不过是管中窥豹，一次只能看到一小段而已。你要确保他永远看不到全貌。要尽量让他难以找到他想找的代码。但更重要的是，要让他不能有把握忽略任何东西。&lt;/p&gt;

&lt;p&gt;程序员都被编程惯例洗脑了，还为此自鸣得意。每一次你处心积虑地违背编程惯例，都会迫使他必须用放大镜去仔细阅读你的每一行代码。&lt;/p&gt;

&lt;p&gt;你可能会觉得每个语言特性都可以用来让代码难以维护，其实不然。你必须精心地误用它们才行。&lt;/p&gt;

&lt;p&gt;编写无法维护代码的技巧的重中之重是变量和方法命名的艺术。如何命名是和编译器无关的。这就让你有巨大的自由度去利用它们迷惑维护代码的程序员。&lt;/p&gt;

&lt;h4 id=&quot;妙用宝宝起名大全&quot;&gt;妙用宝宝起名大全&lt;/h4&gt;
&lt;p&gt;买本宝宝起名大全，你就永远不缺变量名了。比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fred&lt;/code&gt; 就是个好名字，而且键盘输入它也省事。如果你就想找一些容易输入的变量名，可以试试 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adsf&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aoeu&lt;/code&gt; 之类。&lt;/p&gt;

&lt;h4 id=&quot;单字母变量名&quot;&gt;单字母变量名&lt;/h4&gt;
&lt;p&gt;如果你给变量起名为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;，用简单的文本编辑器就没法搜索它们的引用。而且，没人能猜到它们的含义。&lt;/p&gt;

&lt;h4 id=&quot;创造性的拼写错误&quot;&gt;创造性的拼写错误&lt;/h4&gt;
&lt;p&gt;如果你必须使用描述性的变量和函数名，那就把它们都拼错。还可以把某些函数和变量名拼错，再把其他的拼对 (例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetPintleOpening&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SetPintalClosing&lt;/code&gt;) ，我们就能有效地将 grep 或 IDE 搜索技术玩弄于股掌之上。这招超级管用。还可以混淆不同语言（比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;colour&lt;/code&gt; — 英国英语，和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt; — 美国英语)。&lt;/p&gt;

&lt;h4 id=&quot;抽象&quot;&gt;抽象&lt;/h4&gt;
&lt;p&gt;在命名函数和变量的时候，充分利用抽象单词，例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;it&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;everything&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;handle&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stuff&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routine&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;perform&lt;/code&gt; 和数字，像这样命名的好例子有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;routineX48&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PerformDataFunction&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DoIt&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HandleStuff&lt;/code&gt; 还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_args_method&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;首字母大写的缩写&quot;&gt;首字母大写的缩写&lt;/h4&gt;
&lt;p&gt;用首字母大写缩写（比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GNU&lt;/code&gt; 代表 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GNU’s Not Unix&lt;/code&gt;) 使代码简洁难懂。真正的汉子 (无论男女) 从来不说明这种缩写的含义，他们生下来就懂。&lt;/p&gt;

&lt;h4 id=&quot;辞典大轮换&quot;&gt;辞典大轮换&lt;/h4&gt;
&lt;p&gt;为了打破沉闷的编程气氛，你可以用一本辞典来查找尽量多的同义词。例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;show&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;present&lt;/code&gt;。在注释里含糊其辞地暗示这些命名之间有细微的差别，其实根本没有。不过，如果有两个命名相似的函数真的有重大差别，那倒是一定要确保它们用相同的单词来命名 (例如，对于 「写入文件」, 「在纸上书写」 和 「屏幕显示」 都用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; 来命名)。 在任何情况下都不要屈服于编写明确的项目词汇表这种无理要求。你可以辩解说，这种要求是一种不专业的行为，它违反了结构化设计的信息隐藏原则。&lt;/p&gt;

&lt;h4 id=&quot;首字母大写&quot;&gt;首字母大写&lt;/h4&gt;
&lt;p&gt;随机地把单词中间某个音节的首字母大写。例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputeReSult ()&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;重用命名&quot;&gt;重用命名&lt;/h4&gt;
&lt;p&gt;在语言规则允许的地方，尽量把类、构造器、方法、成员变量、参数和局部变量都命名成一样。更高级的技巧是在 {} 块中重用局部变量。这样做的目的是迫使维护代码的程序员认真检查每个实例的作用域。特别是在 Java 代码中，可以把普通方法伪装成构造器。&lt;/p&gt;

&lt;h4 id=&quot;使用非英语字母&quot;&gt;使用非英语字母&lt;/h4&gt;
&lt;p&gt;在命名中偷偷使用不易察觉的非英语字母，例如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;typedef struct { int i; } ínt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;看上去没啥不对是吧？嘿嘿嘿… 这里的第二个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ínt&lt;/code&gt; 的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;í&lt;/code&gt; 实际上是东北欧字母，并不是英语中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; 。在简单的文本编辑器里，想看出这一点点区别几乎是不可能的。&lt;/p&gt;

&lt;h4 id=&quot;巧妙利用编译器对于命名长度的限制&quot;&gt;巧妙利用编译器对于命名长度的限制&lt;/h4&gt;
&lt;p&gt;如果编译器只区分命名的前几位，比如前 8 位，那么就把后面的字母写得不一样。比如，其实是同一个变量，有时候写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_unit_update ()&lt;/code&gt; ，有时候又写成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_unit_setup ()&lt;/code&gt;，看起来是两个不同的函数调用。而在编译的时候，它们其实是同一个变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var_unit&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;下划线真正的朋友&quot;&gt;下划线，真正的朋友&lt;/h4&gt;
&lt;p&gt;可以拿 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__&lt;/code&gt; 作为标示符。&lt;/p&gt;

&lt;h4 id=&quot;混合多语言&quot;&gt;混合多语言&lt;/h4&gt;
&lt;p&gt;随机地混用两种语言（人类语言或计算机语言都行）。如果老板要求使用他指定的语言，你就告诉他你用自己的语言更有利于组织你的思路，万一这招不管用，就去控诉这是语言歧视，并威胁起诉老板要求巨额精神损失赔偿。&lt;/p&gt;

&lt;h4 id=&quot;扩展-ascii-字符&quot;&gt;扩展 ASCII 字符&lt;/h4&gt;
&lt;p&gt;扩展 ASCII 字符用于变量命名是完全合法的，包括 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ß&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ð&lt;/code&gt;, 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ñ&lt;/code&gt; 等。在简单的文本编辑器里，除了&lt;strong&gt;拷贝 / 粘贴&lt;/strong&gt;，基本上没法输入。&lt;/p&gt;

&lt;h4 id=&quot;其他语言的命名&quot;&gt;其他语言的命名&lt;/h4&gt;
&lt;p&gt;使用外语字典作为变量名的来源。例如，可以用德语单词 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;punkt&lt;/code&gt; 代替 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt;。除非维护代码的程序员也像你一样熟练掌握了德语。不然他就只能尽情地在代码中享受异域风情了。&lt;/p&gt;

&lt;h4 id=&quot;数学命名&quot;&gt;数学命名&lt;/h4&gt;
&lt;p&gt;用数学操作符的单词来命名变量。例如：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openParen = (slash + asterix) / equals;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(左圆括号 = (斜杠 + 星号)/ 等号；)&lt;/p&gt;

&lt;h4 id=&quot;令人眩晕的命名&quot;&gt;令人眩晕的命名&lt;/h4&gt;
&lt;p&gt;用带有完全不相关的感情色彩的单词来命名变量。例如：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;marypoppins = (superman + starship) / god;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(欢乐满人间 = (超人 + 星河战队)/ 上帝；)&lt;/p&gt;

&lt;p&gt;这一招可以让阅读代码的人陷入迷惑之中，因为他们在试图想清楚这些命名的逻辑时，会不自觉地联系到不同的感情场景里而无法自拔。&lt;/p&gt;

&lt;h4 id=&quot;何时使用-i&quot;&gt;何时使用 i&lt;/h4&gt;
&lt;p&gt;永远不要把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; 用作最内层的循环变量。 用什么命名都行，就是别用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;。把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt; 用在其他地方就随便了，用作非整数变量尤其好。&lt;/p&gt;

&lt;h4 id=&quot;惯例--明修栈道暗度陈仓&quot;&gt;惯例 — 明修栈道，暗度陈仓&lt;/h4&gt;
&lt;p&gt;忽视 Java 编码惯例，Sun 自己就是这样做的。幸运的是，你违反了它编译器也不会打小报告。这一招的目的是搞出一些在某些特殊情况下有细微差别的名字来。如果你被强迫遵循驼峰法命名，你还是可以在某些模棱两可的情况下颠覆它。例如，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputFilename&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inputfileName&lt;/code&gt; 两个命名都可以合法使用。在此基础上自己发明一套复杂到变态的命名惯例，然后就可以对其他人反咬一口，说他们违反了惯例。&lt;/p&gt;

&lt;h4 id=&quot;小写的-l-看上去很像数字-1&quot;&gt;小写的 l 看上去很像数字 1&lt;/h4&gt;
&lt;p&gt;用小写字母 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l&lt;/code&gt; 标识 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt; 常数。例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10l&lt;/code&gt; 更容易被误认为是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;101&lt;/code&gt; 而不是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10L&lt;/code&gt; 。 禁用所有能让人准确区分 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uvw&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wW&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gq9&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2z&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5s&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;il17|!j&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oO08&lt;/code&gt;  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;;,.&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnr&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{[()]}&lt;/code&gt; 的字体。要做个有创造力的人。&lt;/p&gt;

&lt;h4 id=&quot;把全局命名重用为私有&quot;&gt;把全局命名重用为私有&lt;/h4&gt;
&lt;p&gt;在 A 模块里声明一个全局数组，然后在 B 模块的头文件里再声明一个同名的私有数组，这样看起来你在 B 模块里引用的是那个全局数组，其实却不是。不要在注释里提到这个重复的情况。&lt;/p&gt;

&lt;h4 id=&quot;误导性的命名&quot;&gt;误导性的命名&lt;/h4&gt;
&lt;p&gt;让每个方法都和它的名字蕴含的功能有一些差异。例如，一个叫 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isValid (x)&lt;/code&gt; 的方法在判断完参数 x 的合法性之后，还顺带着把它转换成二进制并保存到数据库里。&lt;/p&gt;

&lt;h4 id=&quot;伪装&quot;&gt;伪装&lt;/h4&gt;
&lt;p&gt;当一个 bug 需要越长的时间才会暴露，它就越难被发现。 – gorpeln（本文作者） &lt;br /&gt;
编写无法维护代码的另一大秘诀就是伪装的艺术，即隐藏它或者让它看起来像其他东西。很多招式有赖于这样一个事实：编译器比肉眼或文本编辑器更有分辨能力。下面是一些伪装的最佳招式。&lt;/p&gt;

&lt;h5 id=&quot;把代码伪装成注释反之亦然&quot;&gt;把代码伪装成注释，反之亦然&lt;/h5&gt;
&lt;p&gt;下面包括了一些被注释掉的代码，但是一眼看去却像是正常代码。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for ( j=0; j&amp;lt;array_len; j+ =8 ){
    total += array[j+0];
    total += array[j+1];
    total += array[j+2];
    total += array[j+3]; /* Main body of
    total += array[j+4];  * loop is unrolled
    total += array[j+5];  * for greater speed.
    total += array[j+6];  */
    total += array[j+7];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果不是用单绿色标出来，你能注意到这三行代码被注释掉了么？&lt;/p&gt;

&lt;h5 id=&quot;用连接符隐藏变量&quot;&gt;用连接符隐藏变量&lt;/h5&gt;
&lt;p&gt;对于下面的定义&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define local_var xy_z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以把 「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xy_z&lt;/code&gt;」 打散到两行里：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define local_var xy\
_z // local_var OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样全局搜索 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xy_z&lt;/code&gt; 的操作在这个文件里就一无所获了。 对于 C 预处理器来说，第一行最后的 「\」 表示继续拼接下一行的内容。&lt;/p&gt;

&lt;h3 id=&quot;文档&quot;&gt;文档&lt;/h3&gt;
&lt;p&gt;任何傻瓜都能说真话，而要把谎编圆则需要相当的智慧。 – Samuel Butler (1835 – 1902)      &lt;br /&gt;
不正确的文档往往比没有文档还糟糕。 – Bertrand Meyer    &lt;br /&gt;
既然计算机是忽略注释和文档的，你就可以在里边堂而皇之地编织弥天大谎，让可怜的维护代码的程序员彻底迷失。&lt;/p&gt;

&lt;h4 id=&quot;在注释中撒谎&quot;&gt;在注释中撒谎&lt;/h4&gt;
&lt;p&gt;实际上你不需要主动地撒谎，只要没有及时保持注释和代码更新的一致性就可以了。&lt;/p&gt;

&lt;h4 id=&quot;只记录显而易见的东西&quot;&gt;只记录显而易见的东西&lt;/h4&gt;
&lt;p&gt;往代码里掺进去类似于&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 给 i 加 1 */
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样的注释，但是永远不要记录包或者方法的整体设计这样的干货。&lt;/p&gt;

&lt;h4 id=&quot;记录-how-而不是-why&quot;&gt;记录 How 而不是 Why&lt;/h4&gt;
&lt;p&gt;只解释一个程序功能的细节，而不是它要完成的任务是什么。这样的话，如果出现了一个 bug，修复者就搞不清这里的代码应有的功能。&lt;/p&gt;

&lt;h4 id=&quot;该写的别写&quot;&gt;该写的别写&lt;/h4&gt;
&lt;p&gt;比如你在开发一套航班预定系统，那就要精心设计，让它在增加另一个航空公司的时候至少有 25 处代码需要修改。永远不要在文档里说明要修改的位置。后来的开发人员要想修改你的代码？门都没有，除非他们能把每一行代码都读懂。&lt;/p&gt;

&lt;h4 id=&quot;计量单位&quot;&gt;计量单位&lt;/h4&gt;
&lt;p&gt;永远不要在文档中说明任何变量、输入、输出或参数的计量单位，如英尺、米、加仑等。计量单位对数豆子不是太重要，但在工程领域就相当重要了。同理，永远不要说明任何转换常量的计量单位，或者是它的取值如何获得。要想让代码更乱的话，你还可以在注释里写上错误的计量单位，这是赤裸裸的欺骗，但是非常有效。如果你想做一个恶贯满盈的人，不妨自己发明一套计量单位，用自己或某个小人物的名字命名这套计量单位，但不要给出定义。万一有人挑刺儿，你就告诉他们，你这么做是为了把浮点数运算凑成整数运算而进行的转换。&lt;/p&gt;

&lt;h4 id=&quot;坑&quot;&gt;坑&lt;/h4&gt;
&lt;p&gt;永远不要记录代码中的坑。如果你怀疑某个类里可能有 bug，天知地知你知就好。如果你想到了重构或重写代码的思路，看在老天爷的份上，千万别写出来。切记电影《小鹿斑比》里那句台词 「&lt;strong&gt;如果你不能说好听的话，那就什么也不要说。&lt;/strong&gt;」。万一这段代码的原作者看到你的注释怎么办？万一老板看到了怎么办？万一客户看到了怎么办？搞不好最后你自己被解雇了。一句「&lt;strong&gt;这里需要修改&lt;/strong&gt;」的匿名注释就好多了，尤其是当看不清这句注释指的是哪里需要修改的情况下。切记「&lt;strong&gt;难得糊涂&lt;/strong&gt;」四个字，这样大家都不会感觉受到了批评。&lt;/p&gt;

&lt;h4 id=&quot;说明变量&quot;&gt;说明变量&lt;/h4&gt;
&lt;p&gt;永远不要对变量声明加注释。有关变量使用的方式、边界值、合法值、小数点后的位数、计量单位、显示格式、数据录入规则等等，后继者完全可以自己从程序代码中去理解和整理嘛。如果老板强迫你写注释，就在方法体里胡乱多写点，但绝对不要对变量声明写注释，即使是临时变量！&lt;/p&gt;

&lt;h4 id=&quot;在注释里挑拨离间&quot;&gt;在注释里挑拨离间&lt;/h4&gt;
&lt;p&gt;为了阻挠任何雇佣外部维护承包商的倾向，可以在代码中散布针对其他同行软件公司的攻击和抹黑，特别是可能接替你工作的其中任何一家。例如：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* 优化后的内层循环
这套技巧对于SSI软件服务公司的那帮蠢材来说太高深了，他们只会
用 &amp;lt;math.h&amp;gt; 里的笨例程，消耗50倍的内存和处理时间。
*/
class clever_SSInc
{
...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可能的话，除了注释之外，这些攻击抹黑的内容也要掺到代码里的重要语义部分，这样如果管理层想清理掉这些攻击性的言论然后发给外部承包商去维护，就会破坏代码结构。&lt;/p&gt;

&lt;h4 id=&quot;程序设计&quot;&gt;程序设计&lt;/h4&gt;
&lt;p&gt;编写无法维护代码的基本规则就是：在尽可能多的地方，以尽可能多的方式表述每一个事实。 – Roedy Green  &lt;br /&gt;
编写可维护代码的关键因素是只在一个地方表述应用里的一个事实。如果你的想法变了，你也只在一个地方修改，这样就能保证整个程序正常工作。所以，编写无法维护代码的关键因素就是反复地表述同一个事实，在尽可能多的地方，以尽可能多的方式进行。令人高兴的是，像 Java 这样的语言让编写这种无法维护代码变得非常容易。例如，改变一个被引用很多的变量的类型几乎是不可能的，因为所有造型和转换功能都会出错，而且关联的临时变量的类型也不合适了。而且，如果变量值要在屏幕上显示，那么所有相关的显示和数据录入代码都必须一一找到并手工进行修改。类似的还有很多，比如由 C 和 Java 组成的 Algol 语言系列，Abundance 甚至 Smalltalk 对于数组等结构的处理，都是大有可为的。&lt;/p&gt;

&lt;h4 id=&quot;java-造型&quot;&gt;Java 造型&lt;/h4&gt;
&lt;p&gt;Java 的造型机制是上帝的礼物。你可以问心无愧地使用它，因为 Java 语言本身就需要它。每次你从一个 Collection 里获取一个对象，你都必须把它造型为原始类型。这样这个变量的类型就必须在无数地方表述。如果后来类型变了，所有的造型都要修改才能匹配。如果倒霉的维护代码的程序员没有找全（或者修改太多），编译器能不能检测到也不好说。类似的，如果变量类型从 short 变成 int，所有匹配的造型也都要从 (short) 改成 (int)。&lt;/p&gt;

&lt;h4 id=&quot;利用-java-的冗余&quot;&gt;利用 Java 的冗余&lt;/h4&gt;
&lt;p&gt;Java 要求你给每个变量的类型写两次表述。 Java 程序员已经习惯了这种冗余，他们不会注意到你的两次表述有细微的差别，例如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bubblegum b = new Bubblegom();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不幸的是 ++ 操作符的盛行让下面这种伪冗余代码得手的难度变大了：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;swimmer = swimner + 1;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;永远不做校验&quot;&gt;永远不做校验&lt;/h4&gt;
&lt;p&gt;永远不要对输入数据做任何的正确性或差异性检查。这样能表现你对公司设备的绝对信任，以及你是一位信任所有项目伙伴和系统管理员的团队合作者。总是返回合理的值，即使数据输入有问题或者错误。&lt;/p&gt;

&lt;h4 id=&quot;有礼貌无断言&quot;&gt;有礼貌，无断言&lt;/h4&gt;
&lt;p&gt;避免使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert ()&lt;/code&gt; 机制，因为它可能把三天的 debug 盛宴变成 10 分钟的快餐。&lt;/p&gt;

&lt;h4 id=&quot;避免封装&quot;&gt;避免封装&lt;/h4&gt;
&lt;p&gt;为了提高效率，不要使用封装。方法的调用者需要所有能得到的外部信息，以便了解方法的内部是如何工作的。&lt;/p&gt;

&lt;h4 id=&quot;复制粘贴修改&quot;&gt;复制粘贴修改&lt;/h4&gt;
&lt;p&gt;以效率的名义，使用 复制 + 粘贴 + 修改。这样比写成小型可复用模块效率高得多。在用代码行数衡量你的进度的小作坊里，这招尤其管用。&lt;/p&gt;

&lt;h4 id=&quot;使用静态数组&quot;&gt;使用静态数组&lt;/h4&gt;
&lt;p&gt;如果一个库里的模块需要一个数组来存放图片，就定义一个静态数组。没人会有比 512 X 512 更大的图片，所以固定大小的数组就可以了。为了最佳精度，就把它定义成 double 类型的数组。&lt;/p&gt;

&lt;h4 id=&quot;傻瓜接口&quot;&gt;傻瓜接口&lt;/h4&gt;
&lt;p&gt;编写一个名为 「&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WrittenByMe&lt;/code&gt;」 之类的空接口，然后让你的所有类都实现它。然后给所有你用到的 Java 内置类编写包装类。这里的思想是确保你程序里的每个对象都实现这个接口。最后，编写所有的方法，让它们的参数和返回类型都是这个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WrittenByMe&lt;/code&gt;。这样就几乎不可能搞清楚某个方法的功能是什么，并且所有类型都需要好玩的造型方法。更出格的玩法是，让每个团队成员编写它们自己的接口 (例如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WrittenByJoe&lt;/code&gt;)，程序员用到的任何类都要实现他自己的接口。这样你就可以在大量无意义接口中随便找一个来引用对象了。&lt;/p&gt;

&lt;h4 id=&quot;巨型监听器&quot;&gt;巨型监听器&lt;/h4&gt;
&lt;p&gt;永远不要为每个组件创建分开的监听器。对所有按钮总是用同一个监听器，只要用大量的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if…else&lt;/code&gt; 来判断是哪一个按钮被点击就行了。&lt;/p&gt;

&lt;h4 id=&quot;好事成堆-tm&quot;&gt;好事成堆 TM&lt;/h4&gt;
&lt;p&gt;狂野地使用封装和 OO 思想。例如&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myPanel.add( getMyButton() );
private JButton getMyButton()
{
return myButton;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这段很可能看起来不怎么好笑。别担心，只是时候未到而已。&lt;/p&gt;

&lt;h4 id=&quot;友好的朋友&quot;&gt;友好的朋友&lt;/h4&gt;
&lt;p&gt;在 C++ 里尽量多使用 friend 声明。再把创建类的指针传递给已创建类。现在你不用浪费时间去考虑接口了。另外，你应该用上关键字 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; 来表明你的类封装得很好。&lt;/p&gt;

&lt;h4 id=&quot;使用三维数组&quot;&gt;使用三维数组&lt;/h4&gt;
&lt;p&gt;大量使用它们。用扭曲的方式在数组之间移动数据，比如，用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrayA&lt;/code&gt; 里的行去填充 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arrayB&lt;/code&gt; 的列。这么做的时候，不管三七二十一再加上 1 的偏移值，这样很灵。让维护代码的程序员抓狂去吧。&lt;/p&gt;

&lt;h4 id=&quot;混合与匹配&quot;&gt;混合与匹配&lt;/h4&gt;
&lt;p&gt;存取方法和公共变量神马的都要给他用上。这样的话，你无需调用存取器的开销就可以修改一个对象的变量，还能宣称这个类是个「Java Bean」。对于那些试图添加日志函数来找出改变值的源头的维护代码的程序员，用这一招来迷惑他尤其有效。&lt;/p&gt;

&lt;h4 id=&quot;没有秘密&quot;&gt;没有秘密！&lt;/h4&gt;
&lt;p&gt;把每个方法和变量都声明为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;。毕竟某个人某天可能会需要用到它。一旦方法被声明为 public 了，就很难缩回去。对不？这样任何它覆盖到的代码都很难修改了。它还有个令人愉快的副作用，就是让你看不清类的作用是什么。如果老板质问你是不是疯了，你就告诉他你遵循的是经典的透明接口原则。&lt;/p&gt;

&lt;h4 id=&quot;全堆一块&quot;&gt;全堆一块&lt;/h4&gt;
&lt;p&gt;把你所有的没用的和过时的方法和变量都留在代码里。毕竟说起来，既然你在 &lt;strong&gt;1976&lt;/strong&gt; 年用过一次，谁知道你啥时候会需要再用到呢？当然程序是改了，但它也可能会改回来嘛，你「&lt;strong&gt;不想要重新发明轮子&lt;/strong&gt;」（&lt;u&gt;领导们都会喜欢这样的口气&lt;/u&gt;）。如果你还原封不动地留着这些方法和变量的注释，而且注释写得又高深莫测，甭管维护代码的是谁，恐怕都不敢对它轻举妄动。&lt;/p&gt;

&lt;h4 id=&quot;就是-final&quot;&gt;就是 Final&lt;/h4&gt;
&lt;p&gt;把你所有的叶子类都声明为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt;。毕竟说起来，你在项目里的活儿都干完了，显然不会有其他人会通过扩展你的类来改进你的代码。这种情况甚至可能有安全漏洞。 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;java.lang.String&lt;/code&gt; 被定义成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final&lt;/code&gt; 也许就是这个原因吧？如果项目组其他程序员有意见，告诉他们这样做能够提高运行速度。&lt;/p&gt;

&lt;h4 id=&quot;避免布局&quot;&gt;避免布局&lt;/h4&gt;
&lt;p&gt;永远不要用到布局。当维护代码的程序员想增加一个字段，他必须手工调整屏幕上显示所有内容的绝对坐标值。如果老板强迫你使用布局，那就写一个巨型的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GridBagLayout&lt;/code&gt; 并在里面用绝对坐标进行硬编码。&lt;/p&gt;

&lt;h4 id=&quot;全局变量怎么强调都不过分&quot;&gt;全局变量，怎么强调都不过分&lt;/h4&gt;
&lt;p&gt;如果上帝不愿意我们使用全局变量，他就不会发明出这个东西。不要让上帝失望，尽量多使用全局变量。每个函数最起码都要使用和设置其中的两个，即使没有理由也要这么做。毕竟，任何优秀的维护代码的程序员都会很快搞清楚这是一种侦探工作测试，有利于让他们从笨蛋中脱颖而出。&lt;/p&gt;

&lt;h4 id=&quot;再一次说说全局变量&quot;&gt;再一次说说全局变量&lt;/h4&gt;
&lt;p&gt;全局变量让你可以省去在函数里描述参数的麻烦。充分利用这一点。在全局变量中选那么几个来表示对其他全局变量进行操作的类型。&lt;/p&gt;

&lt;h4 id=&quot;局部变量&quot;&gt;局部变量&lt;/h4&gt;
&lt;p&gt;永远不要用局部变量。在你感觉想要用的时候，把它改成一个实例或者静态变量，并无私地和其他方法分享它。这样做的好处是，你以后在其他方法里写类似声明的时候会节省时间。C++ 程序员可以百尺竿头更进一步，把所有变量都弄成全局的。&lt;/p&gt;

&lt;h4 id=&quot;配置文件&quot;&gt;配置文件&lt;/h4&gt;
&lt;p&gt;配置文件通常是以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;关键字 = 值&lt;/code&gt; 的形式出现。在加载时这些值被放入 Java 变量中。最明显的迷惑技术就是把有细微差别的名字用于关键字和 Java 变量。甚至可以在配置文件里定义运行时根本不会改变的常量。参数文件变量和简单变量比，维护它的代码量起码是后者的 5 倍。&lt;/p&gt;

&lt;h4 id=&quot;子类&quot;&gt;子类&lt;/h4&gt;
&lt;p&gt;对于编写无法维护代码的任务来说，面向对象编程的思想简直是天赐之宝。如果你有一个类，里边有 10 个属性（成员 / 方法），可以考虑写一个基类，里面只有一个属性，然后产生 9 层的子类，每层增加一个属性。等你访问到最终的子类时，你才能得到全部 10 个属性。如果可能，把每个类的声明都放在不同的文件里。&lt;/p&gt;

&lt;h4 id=&quot;迷惑-c&quot;&gt;迷惑 C&lt;/h4&gt;
&lt;p&gt;从互联网上的各种混乱 C 语言竞赛中学习，追随大师们的脚步。&lt;/p&gt;

&lt;h4 id=&quot;追求极致&quot;&gt;追求极致&lt;/h4&gt;
&lt;p&gt;总是追求用最迷惑的方式来做普通的任务。例如，要用数组来把整数转换为相应的字符串，可以这么做：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;char *p;
switch (n)
{
case 1:
p = &quot;one&quot;;
if (0)
case 2:
p = &quot;two&quot;;
if (0)
case 3:
p = &quot;three&quot;;
printf(&quot;%s&quot;, p);
break;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;一致性的小淘气&quot;&gt;一致性的小淘气&lt;/h4&gt;
&lt;p&gt;当你需要一个字符常量的时候，可以用多种不同格式： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;32&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0x20&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;040&lt;/code&gt;。在 C 或 Java 里 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;010&lt;/code&gt; 是不同的数（0 开头的表示 8 进制），你也可以充分利用这个特性。&lt;/p&gt;

&lt;h4 id=&quot;造型&quot;&gt;造型&lt;/h4&gt;
&lt;p&gt;把所有数据都以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *&lt;/code&gt; 形式传递，然后再造型为合适的结构。不用结构而是通过位移字节数来造型也很好玩。&lt;/p&gt;

&lt;h4 id=&quot;嵌套-switch&quot;&gt;嵌套 Switch&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Switch&lt;/code&gt; 里边还有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Switch&lt;/code&gt;，这种嵌套方式是人类大脑难以破解的。&lt;/p&gt;

&lt;h4 id=&quot;利用隐式转化&quot;&gt;利用隐式转化&lt;/h4&gt;
&lt;p&gt;牢记编程语言中所有的隐式转化细节。充分利用它们。数组的索引要用浮点变量，循环计数器用字符，对数字执行字符串函数调用。不管怎么说，所有这些操作都是合法的，它们无非是让源代码更简洁而已。任何尝试理解它们的维护者都会对你感激不尽，因为他们必须阅读和学习整个关于隐式数据类型转化的章节，而这个章节很可能是他们来维护你的代码之前完全忽略了的。&lt;/p&gt;

&lt;h4 id=&quot;分号&quot;&gt;分号！&lt;/h4&gt;
&lt;p&gt;在所有语法允许的地方都加上分号，例如：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(a);
else;
{
int d;
d = c;
}
;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;使用八进制数&quot;&gt;使用八进制数&lt;/h4&gt;
&lt;p&gt;把八进制数混到十进制数列表里，就像这样：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;array = new int []
{
111,
120,
013,
121,
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;嵌套&quot;&gt;嵌套&lt;/h4&gt;
&lt;p&gt;尽可能深地嵌套。优秀的程序员能在一行代码里写 10 层 ()，在一个方法里写 20 层 {}。&lt;/p&gt;

&lt;h4 id=&quot;c-数组&quot;&gt;C 数组&lt;/h4&gt;
&lt;p&gt;C 编译器会把 myArray [i] 转换成 *(myArray + i)，它等同于 *(i + myArray) 也等同于 i [myArray]。 高手都知道怎么用好这个招。可以用下面的函数来产生索引，这样就把代码搞乱了：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int myfunc(int q, int p) { return p%q; }
...
myfunc(6291, 8)[Array];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;遗憾的是，这一招只能在本地 C 类里用，Java 还不行。&lt;/p&gt;

&lt;h4 id=&quot;放长线钓大鱼&quot;&gt;放长线钓大鱼&lt;/h4&gt;
&lt;p&gt;一行代码里堆的东西越多越好。这样可以省下临时变量的开销，去掉换行和空格还可以缩短源文件大小。记住，要去掉运算符两边的空格。优秀的程序员总是能突破某些编辑器对于 255 个字符行宽的限制。&lt;/p&gt;

&lt;h4 id=&quot;异常&quot;&gt;异常&lt;/h4&gt;
&lt;p&gt;在这里我要向你传授一个编程领域里鲜为人知的秘诀。异常是个讨厌的东西。良好的代码永远不会出错，所以异常实际上是不必要的。不要把时间浪费在这上面。子类异常是给那些知道自己代码会出错的低能儿用的。在整个应用里，你只用在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main ()&lt;/code&gt; 里放一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/catch&lt;/code&gt;，里边直接调用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;System.exit ()&lt;/code&gt; 就行了。在每个方法头要贴上标准的抛出集合定义，至于会不会抛出异常你就甭管了。&lt;/p&gt;

&lt;h4 id=&quot;使用异常的时机&quot;&gt;使用异常的时机&lt;/h4&gt;
&lt;p&gt;在非异常条件下才要使用异常。比如终止循环就可以用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;。还可以从异常里的方法返回标准的结果。&lt;/p&gt;

&lt;h4 id=&quot;永不测试&quot;&gt;永不测试&lt;/h4&gt;
&lt;p&gt;永远不要测试负责处理错误、宕机或操作系统故障的任何代码。反正这些代码永远也不会执行，只会拖累你的测试。还有，你怎么可能测试处理磁盘错误、文件读取错误、操作系统崩溃这些类型的事件呢？为啥你要用特别不稳定的计算机或者用测试脚手架来模拟这样的环境？现代化的硬件永远不会崩溃，谁还愿意写一些仅仅用于测试的代码？这一点也不好玩。万一将来出了事用户抱怨，你就怪到操作系统或者硬件头上。他们永远不会知道真相的。&lt;/p&gt;

&lt;h4 id=&quot;永远不要做性能测试&quot;&gt;永远不要做性能测试&lt;/h4&gt;
&lt;p&gt;嘿，如果软件运行不够快，只要告诉客户买个更快的机器就行了。如果你真的做了性能测试，你可能会发现一个瓶颈，这会导致修改算法，然后导致整个产品要重新设计。谁想要这种结果？而且，在客户那边发现性能问题意味着你可以免费到外地旅游。你只要备好护照和最新照片就行了。&lt;/p&gt;

&lt;h4 id=&quot;永远不要写任何测试用例&quot;&gt;永远不要写任何测试用例&lt;/h4&gt;
&lt;p&gt;永远不要做代码覆盖率或路径覆盖率测试。自动化测试是给那些窝囊废用的。搞清楚哪些特性占到你的例程使用率的 90%，然后把 90% 的测试用在这些路径上。毕竟说起来，这种方法可能只测试到了大约你代码的 60%，这样你就节省了 40% 的测试工作。这能帮助你赶上项目后端的进度。等到有人发现所有这些漂亮的「市场特性」不能正常工作的时候，你早就跑路了。一些有名的大软件公司就是这样测试代码的，所以你也应该这样做。如果因为某种原因你还没走，那就接着看下一节。&lt;/p&gt;

&lt;h4 id=&quot;测试是给懦夫用的&quot;&gt;测试是给懦夫用的&lt;/h4&gt;
&lt;p&gt;勇敢的程序员会跳过这个步骤。太多程序员害怕他们的老板，害怕丢掉工作，害怕客户的投诉邮件，害怕遭到起诉。这种恐惧心理麻痹了行动，降低了生产率。有科学研究成果表明，取消测试阶段意味着经理有把握能提前确定交付时间，这对于规划流程显然是有利的。消除了恐惧心理，创新和实验之花就随之绽放。程序员的角色是生产代码，调试工作完全可以由技术支持和遗留代码维护组通力合作来进行。   &lt;br /&gt;
如果我们对自己的编程能力有充分信心，那么测试就没有必要了。如果我们逻辑地看待这个问题，随便一个傻瓜都能认识到测试根本都不是为了解决技术问题，相反，它是一种感性的信心问题。针对这种缺乏信心的问题，更有效的解决办法就是完全取消测试，送我们的程序员去参加自信心培训课程。毕竟说起来，如果我们选择做测试，那么我们就要测试每个程序的变更，但其实我们只需要送程序员去一次建立自信的培训课就行了。很显然这么做的成本收益是相当可观的。&lt;/p&gt;

&lt;h4 id=&quot;编程语言的选择&quot;&gt;编程语言的选择&lt;/h4&gt;
&lt;p&gt;计算机语言正在逐步进化，变得更加傻瓜化。使用最新的语言算什么好汉？尽可能坚持使用你会用的最老的语言，先考虑用穿孔纸带，不行就用汇编，再不行用 FORTRAN 或者 COBOL，再不行就用 C 还有 BASIC，实在不行再用 C++。&lt;/p&gt;

&lt;h4 id=&quot;fortran&quot;&gt;FORTRAN&lt;/h4&gt;
&lt;p&gt;用 FORTRAN 写所有的代码。如果老板问你为啥，你可以回答说它有很多非常有用的库，你用它可以节约时间。不过，用 FORTRAN 写出可维护代码的概率是 0，所以，要达到不可维护代码编程指南里的要求就容易多了。&lt;/p&gt;

&lt;h4 id=&quot;用-asm&quot;&gt;用 ASM&lt;/h4&gt;
&lt;p&gt;把所有的通用工具函数都转成汇编程序。&lt;/p&gt;

&lt;h4 id=&quot;用-qbasic&quot;&gt;用 QBASIC&lt;/h4&gt;
&lt;p&gt;所有重要的库函数都要用 QBASIC 写，然后再写个汇编的封包程序来处理 large 到 medium 的内存模型映射。&lt;/p&gt;

&lt;h4 id=&quot;内联汇编&quot;&gt;内联汇编&lt;/h4&gt;
&lt;p&gt;在你的代码里混杂一些内联的汇编程序，这样很好玩。这年头几乎没人懂汇编程序了。只要放几行汇编代码就能让维护代码的程序员望而却步。&lt;/p&gt;

&lt;h4 id=&quot;宏汇编调用-c&quot;&gt;宏汇编调用 C&lt;/h4&gt;
&lt;p&gt;如果你有个汇编模块被 C 调用，那就尽可能经常从汇编模块再去调用 C，即使只是出于微不足道的用途，另外要充分利用 goto, bcc 和其他炫目的汇编秘籍。&lt;/p&gt;

&lt;h3 id=&quot;与他人共事之道&quot;&gt;与他人共事之道&lt;/h3&gt;
&lt;h4 id=&quot;老板才是真行家&quot;&gt;老板才是真行家&lt;/h4&gt;
&lt;p&gt;如果你的老板认为他 20 年的 FORTRAN 编程经验对于现代软件开发具有很高的指导价值，你务必严格采纳他的所有建议。投桃报李，你的老板也会信任你。这会对你的职业发展有利。你还会从他那里学到很多搞乱程序代码的新方法。&lt;/p&gt;

&lt;h4 id=&quot;颠覆技术支持&quot;&gt;颠覆技术支持&lt;/h4&gt;
&lt;p&gt;确保代码中到处是 bug 的有效方法是永远不要让维护代码的程序员知道它们。这需要颠覆技术支持工作。永远不接电话。使用自动语音答复「&lt;strong&gt;感谢拨打技术支持热线。需要人工服务请按 1，或在嘀声后留言。&lt;/strong&gt;」，请求帮助的电子邮件必须忽略，不要给它分配服务追踪号。对任何问题的标准答复是「&lt;strong&gt;我估计你的账户被锁定了，有权限帮你恢复的人现在不在。&lt;/strong&gt;」&lt;/p&gt;

&lt;h4 id=&quot;沉默是金&quot;&gt;沉默是金&lt;/h4&gt;
&lt;p&gt;永远不要对下一个危机保持警觉。如果你预见到某个问题可能会在一个固定时间爆发，摧毁西半球的全部生命，不要公开讨论它。不要告诉朋友、同事或其他你认识的有本事的人。在任何情况下都不要发表任何可能暗示到这种新的威胁的内容。只发送一篇正常优先级的、语焉不详的备忘录给管理层，保护自己免遭秋后算账。如果可能的话，把这篇稀里糊涂的信息作为另外一个更紧急的业务问题的附件。这样就可以心安理得地休息了，你知道将来你被强制提前退休之后一段时间，他们又会求着你回来，并给你对数级增长的时薪！&lt;/p&gt;

&lt;h4 id=&quot;每月一书俱乐部&quot;&gt;每月一书俱乐部&lt;/h4&gt;
&lt;p&gt;加入一个计算机每月一书俱乐部。选择那些看上去忙着写书不可能有时间真的去写代码的作者。去书店里找一些有很多图表但是没有代码例子的书。浏览一下这些书，从中学会一些迂腐拗口的术语，用它们就能唬住那些自以为是的维护代码的程序员。你的代码肯定会给他留下深刻印象。如果人们连你写的术语都理解不了，他们一定会认为你非常聪明，你的算法非常深奥。不要在你的算法说明里作任何朴素的类比。&lt;/p&gt;

&lt;h4 id=&quot;自立门户&quot;&gt;自立门户&lt;/h4&gt;
&lt;p&gt;你一直想写系统级的代码。现在机会来了。忽略标准库， 编写你自己的标准，这将会是你简历中的一大亮点。&lt;/p&gt;

&lt;h4 id=&quot;推出你自己的-bnf-范式&quot;&gt;推出你自己的 BNF 范式&lt;/h4&gt;
&lt;p&gt;总是用你自创的、独一无二的、无文档的 BNF 范式记录你的命令语法。永远不要提供一套带注解的例子（合法命令和非法命令之类）来解释你的语法体系。那样会显得完全缺乏学术严谨性。确保没有明显的方式来区分终结符和中间符号。永远不要用字体、颜色、大小写和其他任何视觉提示帮助读者分辨它们。在你的 BNF 范式用和命令语言本身完全一样的标点符号，这样读者就永远无法分清一段 (…), […], {…} 或 「…」 到底是你在命令行里真正输入的，还是想提示在你的 BNF 范式里哪个语法元素是必需的、可重复的、或可选的。不管怎么样，如果他们太笨，搞不清你的 BNF 范式的变化，就没资格使用你的程序。&lt;/p&gt;

&lt;h4 id=&quot;推出你自己的内存分配&quot;&gt;推出你自己的内存分配&lt;/h4&gt;
&lt;p&gt;地球人儿都知道，调试动态存储是复杂和费时的。与其逐个类去确认它没有内存溢出，还不如自创一套存储分配机制呢。其实它无非是从一大片内存中 &lt;strong&gt;malloc&lt;/strong&gt; 一块空间而已。用不着释放内存，让用户定期重启动系统，这样不就清除了堆么。重启之后系统需要追踪的就那么一点东西，比起解决所有的内存泄露简单得不知道到哪里去了！而且，只要用户记得定期重启系统，他们也永远不会遇到堆空间不足的问题。一旦系统被部署，你很难想象他们还能改变这个策略。&lt;/p&gt;

&lt;h3 id=&quot;其他杂七杂八的招&quot;&gt;其他杂七杂八的招&lt;/h3&gt;
&lt;p&gt;如果你给某人一段程序，你会让他困惑一天；如果你教他们如何编程，你会让他困惑一辈子。
— Anonymous&lt;/p&gt;

&lt;h4 id=&quot;不要重编译&quot;&gt;不要重编译&lt;/h4&gt;
&lt;p&gt;让我们从一条可能是有史以来最友好的技巧开始：把代码编译成可执行文件。如果它能用，就在源代码里做一两个微小的改动 — 每个模块都照此办理。但是不要费劲巴拉地再编译一次了。 你可以留着等以后有空而且需要调试的时候再说。多年以后，等可怜的维护代码的程序员更改了代码之后发现出错了，他会有一种错觉，觉得这些肯定是他自己最近修改的。这样你就能让他毫无头绪地忙碌很长时间。&lt;/p&gt;

&lt;h4 id=&quot;挫败调试工具&quot;&gt;挫败调试工具&lt;/h4&gt;
&lt;p&gt;对于试图用行调试工具追踪来看懂你的代码的人，简单的一招就能让他狼狈不堪，那就是把每一行代码都写得很长。特别要把 then 语句 和 if 语句放在同一行里。他们无法设置断点。他们也无法分清在看的分支是哪个 if 里的。&lt;/p&gt;

&lt;h4 id=&quot;公制和美制&quot;&gt;公制和美制&lt;/h4&gt;
&lt;p&gt;在工程方面有两种编码方式。一种是把所有输入都转换为公制（米制）计量单位，然后在输出的时候自己换算回各种民用计量单位。另一种是从头到尾都保持各种计量单位混合在一起。总是选择第二种方式，这就是美国之道！&lt;/p&gt;

&lt;h4 id=&quot;持续改进&quot;&gt;持续改进&lt;/h4&gt;
&lt;p&gt;要持续不懈地改进。要常常对你的代码做出「&lt;strong&gt;改进&lt;/strong&gt;」，并强迫用户经常升级 — 毕竟没人愿意用一个过时的版本嘛。即便他们觉得他们对现有的程序满意了，想想看，如果他们看到你又「&lt;strong&gt;完善&lt;/strong&gt;」了它，他们会多么开心啊！不要告诉任何人版本之间的差别，除非你被逼无奈 — 毕竟，为什么要告诉他们本来永远也不会注意到的一些 bug 呢？&lt;/p&gt;

&lt;h4 id=&quot;关于&quot;&gt;「关于」&lt;/h4&gt;
&lt;p&gt;「&lt;strong&gt;关于&lt;/strong&gt;」一栏应该只包含程序名、程序员姓名和一份用法律用语写的版权声明。理想情况下，它还应该链接到几 MB 的代码，产生有趣的动画效果。但是，里边永远不要包含程序用途的描述、它的版本号、或最新代码修改日期、或获取更新的网站地址、或作者的 email 地址等。这样，所有的用户很快就会运行在各种不同的版本上，在安装 N+1 版之前就试图安装 N+2 版。&lt;/p&gt;

&lt;h4 id=&quot;变更&quot;&gt;变更&lt;/h4&gt;
&lt;p&gt;在两个版本之间，你能做的变更自然是多多益善。你不会希望用户年复一年地面对同一套老的接口或用户界面，这样会很无聊。最后，如果你能在用户不注意的情况下做出这些变更，那就更好了 — 这会让他们保持警惕，戒骄戒躁。&lt;/p&gt;

&lt;h4 id=&quot;无需技能&quot;&gt;无需技能&lt;/h4&gt;
&lt;p&gt;写无法维护代码不需要多高的技术水平。喊破嗓子不如甩开膀子，不管三七二十一开始写代码就行了。记住，管理层还在按代码行数考核生产率，即使以后这些代码里的大部分都得删掉。&lt;/p&gt;

&lt;h4 id=&quot;只带一把锤子&quot;&gt;只带一把锤子&lt;/h4&gt;
&lt;p&gt;一招鲜吃遍天，会干什么就吆喝什么，轻装前进。如果你手头只有一把锤子，那么所有的问题都是钉子。&lt;/p&gt;

&lt;h4 id=&quot;规范体系&quot;&gt;规范体系&lt;/h4&gt;
&lt;p&gt;有可能的话，忽略当前你的项目所用语言和环境中被普罗大众所接受的编程规范。比如，编写基于 MFC 的应用时，就坚持使用 STL 编码风格。&lt;/p&gt;

&lt;h4 id=&quot;翻转通常的-true-false-惯例&quot;&gt;翻转通常的 True False 惯例&lt;/h4&gt;
&lt;p&gt;把常用的 true 和 false 的定义反过来用。这一招听起来平淡无奇，但是往往收获奇效。你可以先藏好下面的定义：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define TRUE 0
#define FALSE 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;把这个定义深深地藏在代码中某个没人会再去看的文件里不易被发现的地方，然后让程序做下面这样的比较&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( var == **TRUE** )
if ( var != **FALSE** )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;某些人肯定会迫不及待地跳出来「修正」这种明显的冗余，并且在其他地方照着常规去使用变量 var：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if ( var )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还有一招是为 TRUE 和 FALSE 赋予相同的值，虽然大部分人可能会看穿这种骗局。给它们分别赋值 1 和 2 或者 -1 和 0 是让他们瞎忙乎的方式里更精巧的，而且这样做看起来也不失对他们的尊重。你在 Java 里也可以用这一招，定义一个叫 TRUE 的静态常量。在这种情况下，其他程序员更有可能怀疑你干的不是好事，因为 Java 里已经有了内建的标识符 true。&lt;/p&gt;

&lt;h4 id=&quot;第三方库&quot;&gt;第三方库&lt;/h4&gt;
&lt;p&gt;在你的项目里引入功能强大的第三方库，然后不要用它们。潜规则就是这样，虽然你对这些工具仍然一无所知，却可以在你简历的「其他工具」一节中写上这些没用过的库。&lt;/p&gt;

&lt;h4 id=&quot;不要用库&quot;&gt;不要用库&lt;/h4&gt;
&lt;p&gt;假装不知道有些库已经直接在你的开发工具中引入了。如果你用 VC++ 编程，忽略 MFC 或 STL 的存在，手工编写所有字符串和数组的实现；这样有助于保持你玩指针技术的高水平，并自动阻止任何扩展代码功能的企图。&lt;/p&gt;

&lt;h4 id=&quot;创建一套-build-顺序&quot;&gt;创建一套 Build 顺序&lt;/h4&gt;
&lt;p&gt;把这套顺序规则做得非常晦涩，让维护者根本无法编译任何他的修改代码。秘密保留 SmartJ ，它会让 make 脚本形同废物。类似地，偷偷地定义一个 javac 类，让它和编译程序同名。说到大招，那就是编写和维护一个定制的小程序，在程序里找到需要编译的文件，然后通过直接调用 sun.tools.javac.Main 编译类来进行编译。&lt;/p&gt;

&lt;h4 id=&quot;make-的更多玩法&quot;&gt;Make 的更多玩法&lt;/h4&gt;
&lt;p&gt;用一个 makefile-generated-batch-file 批处理文件从多个目录复制源文件，文件之间的覆盖规则在文档中是没有的。这样，无需任何炫酷的源代码控制系统，就能实现代码分支，并阻止你的后继者弄清哪个版本的 DoUsefulWork () 才是他需要修改的那个。&lt;/p&gt;

&lt;h4 id=&quot;搜集编码规范&quot;&gt;搜集编码规范&lt;/h4&gt;
&lt;p&gt;尽可能搜集所有关于编写可维护代码的建议，例如 SquareBox 的建议 ，然后明目张胆地违反它们。&lt;/p&gt;

&lt;h4 id=&quot;规避公司的编码规则&quot;&gt;规避公司的编码规则&lt;/h4&gt;
&lt;p&gt;某些公司有严格的规定，不允许使用数字标识符，你必须使用预先命名的常量。要挫败这种规定背后的意图太容易了。比如，一位聪明的 C++ 程序员是这么写的：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define K_ONE 1
#define K_TWO 2
#define K_THOUSAND 999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;编译器警告&quot;&gt;编译器警告&lt;/h4&gt;
&lt;p&gt;一定要保留一些编译器警告。在 make 里使用 「-」 前缀强制执行，忽视任何编译器报告的错误。这样，即使维护代码的程序员不小心在你的源代码里造成了一个语法错误，make 工具还是会重新把整个包 build 一遍，甚至可能会成功！而任何程序员要是手工编译你的代码，看到屏幕上冒出一堆其实无关紧要的警告，他们肯定会觉得是自己搞坏了代码。同样，他们一定会感谢你让他们有找错的机会。学有余力的同学可以做点手脚让编译器在打开编译错误诊断工具时就没法编译你的程序。当然了，编译器也许能做一些脚本边界检查，但是真正的程序员是不用这些特性的，所以你也不该用。既然你用自己的宝贵时间就能找到这些精巧的 bug，何必还多此一举让编译器来检查错误呢？&lt;/p&gt;

&lt;h4 id=&quot;把-bug-修复和升级混在一起&quot;&gt;把 bug 修复和升级混在一起&lt;/h4&gt;
&lt;p&gt;永远不要发布什么「bug 修复」版本。一定要把 bug 修复和数据库结构变更、复杂的用户界面修改，还有管理界面重写等混在一起。那样的话，升级就变成一件非常困难的事情，人们会慢慢习惯 bug 的存在并开始称他们为特性。那些真心希望改变这些」特性「的人们就会有动力升级到新版本。这样从长期来说可以节省你的维护工作量，并从你的客户那里获得更多收入。&lt;/p&gt;

&lt;h4 id=&quot;在你的产品发布每个新版本的时候都改变文件结构&quot;&gt;在你的产品发布每个新版本的时候都改变文件结构&lt;/h4&gt;
&lt;p&gt;没错，你的客户会要求向上兼容，那就去做吧。不过一定要确保向下是不兼容的。这样可以阻止客户从新版本回退，再配合一套合理的 bug 修复规则（见上一条），就可以确保每次新版本发布后，客户都会留在新版本。学有余力的话，还可以想办法让旧版本压根无法识别新版本产生的文件。那样的话，老版本系统不但无法读取新文件，甚至会否认这些文件是自己的应用系统产生的！温馨提示：PC 上的 Word 文字处理软件就典型地精于此道。&lt;/p&gt;

&lt;h4 id=&quot;抵消-bug&quot;&gt;抵消 Bug&lt;/h4&gt;
&lt;p&gt;不用费劲去代码里找 bug 的根源。只要在更高级的例程里加入一些抵销它的代码就行了。这是一种很棒的智力测验，类似于玩 3D 棋，而且能让将来的代码维护者忙乎很长时间都想不明白问题到底出在哪里：是产生数据的低层例程，还是莫名其妙改了一堆东西的高层代码。这一招对天生需要多回合执行的编译器也很好用。你可以在较早的回合完全避免修复问题，让较晚的回合变得更加复杂。如果运气好，你永远都不用和编译器前端打交道。学有余力的话，在后端做点手脚，一旦前端产生的是正确的数据，就让后端报错。&lt;/p&gt;

&lt;h4 id=&quot;使用旋转锁&quot;&gt;使用旋转锁&lt;/h4&gt;
&lt;p&gt;不要用真正的同步原语，多种多样的旋转锁更好 — 反复休眠然后测试一个 (non-volatile 的) 全局变量，直到它符合你的条件为止。相比系统对象，旋转锁使用简便，」通用「性强，」灵活「多变，实为居家旅行必备。&lt;/p&gt;

&lt;h4 id=&quot;随意安插-sync-代码&quot;&gt;随意安插 sync 代码&lt;/h4&gt;
&lt;p&gt;把某些系统同步原语安插到一些用不着它们的地方。本人曾经在一段不可能会有第二个线程的代码中看到一个临界区（critical section）代码。本人当时就质问写这段代码的程序员，他居然理直气壮地说这么写是为了表明这段代码是很」关键「（单词也是 critical）的！&lt;/p&gt;

&lt;h4 id=&quot;优雅降级&quot;&gt;优雅降级&lt;/h4&gt;
&lt;p&gt;如果你的系统包含了一套 NT 设备驱动，就让应用程序负责给驱动分配 I/O 缓冲区，然后在任何事务过程中对内存中的驱动加锁，并在事务完成后释放或解锁。这样一旦应用非正常终止，I/O 缓存又没有被解锁，NT 服务器就会当机。但是在客户现场不太可能会有人知道怎么弄好设备驱动，所以他们就没有选择（只能请你去免费旅游了）。&lt;/p&gt;

&lt;h4 id=&quot;定制脚本语言&quot;&gt;定制脚本语言&lt;/h4&gt;
&lt;p&gt;在你的 C/S 应用里嵌入一个在运行时按字节编译的脚本命令语言。&lt;/p&gt;

&lt;h4 id=&quot;依赖于编译器的代码&quot;&gt;依赖于编译器的代码&lt;/h4&gt;
&lt;p&gt;如果你发现在你的编译器或解释器里有个 bug，一定要确保这个 bug 的存在对于你的代码正常工作是至关重要的。毕竟你又不会使用其他的编译器，其他任何人也不允许！&lt;/p&gt;

&lt;h4 id=&quot;一个货真价实的例子&quot;&gt;一个货真价实的例子&lt;/h4&gt;
&lt;p&gt;下面是一位大师编写的真实例子。让我们来瞻仰一下他在这样短短几行 C 函数里展示的高超技巧。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void* Realocate(void*buf, int os, int ns)
{
void* temp;
temp = malloc(os);
memcpy((void*)tem*, (void*)buf, os);
free(buf);
buf = malloc(ns);
memset(buf, 0, ns);
memcpy((void*)buf, (void*)temp, ns);
return buf;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;重新发明了标准库里已有的简单函数。&lt;/li&gt;
  &lt;li&gt;Realocate 这个单词拼写错误。所以说，永远不要低估创造性拼写的威力。&lt;/li&gt;
  &lt;li&gt;无缘无故地给输入缓冲区产生一个临时的副本。&lt;/li&gt;
  &lt;li&gt;无缘无故地造型。 memcpy () 里有 (void&lt;em&gt;)，这样即使我们的指针已经是 (void&lt;/em&gt;) 了也要再造型一次。另外，这样做可以传递任何东西作为参数，加 10 分。&lt;/li&gt;
  &lt;li&gt;永远不必费力去释放临时内存空间。这样会导致缓慢的内存泄露，一开始看不出来，要程序运行一段时间才行。&lt;/li&gt;
  &lt;li&gt;把用不着的东西也从缓冲区里拷贝出来，以防万一。这样只会在 Unix 上产生 core dump，Windows 就不会。&lt;/li&gt;
  &lt;li&gt;很显然，os 和 ns 的含义分别是」old size」 和 「new size」。&lt;/li&gt;
  &lt;li&gt;给 buf 分配内存之后，memset 初始化它为 0。不要使用 calloc ()，因为某些人会重写 ANSI 规范，这样将来保不齐 calloc () 往 buf 里填的就不是 0 了。（虽然我们复制过去的数据量和 buf 的大小是一样的，不需要初始化，不过这也无所谓啦）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何修复-unused-variable-错误&quot;&gt;如何修复 「unused variable」 错误&lt;/h4&gt;
&lt;p&gt;如果你的编译器冒出了 「unused local variable」 警告，不要去掉那个变量。相反，要找个聪明的办法把它用起来。我最喜欢的方法是：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i = i; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;大小很关键&quot;&gt;大小很关键&lt;/h4&gt;
&lt;p&gt;差点忘了说了，函数是越大越好。跳转和 GOTO 语句越多越好。那样的话，想做任何修改都需要分析很多场景。这会让维护代码的程序员陷入千头万绪之中。如果函数真的体型庞大的话，对于维护代码的程序员就是哥斯拉怪兽了，它会在他搞清楚情况之前就残酷无情地将他踩翻在地。&lt;/p&gt;

&lt;h4 id=&quot;一张图片顶-1000-句话一个函数就是-1000-行&quot;&gt;一张图片顶 1000 句话，一个函数就是 1000 行&lt;/h4&gt;
&lt;p&gt;把每个方法体写的尽可能的长 — 最好是你写的任何一个方法或函数都不会少于 1000 行代码，而且里边是深度嵌套，这是必须的。&lt;/p&gt;

&lt;h4 id=&quot;少个文件&quot;&gt;少个文件&lt;/h4&gt;
&lt;p&gt;一定要保证一个或多个关键文件无法找到。利用 includes 里边再 includes 就能做到这一点。例如，在你的 main 模块里，你写上：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdcode.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Stdcode.h 是有的。但是在 stdcode.h 里，还有个引用：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;a:\\refcode.h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后，refcode.h 就没地方能找到了。
到处都写，无处会读
至少要把一个变量弄成这样：到处被设置，但是几乎没有哪里用到它。不幸的是，现代编译器通常会阻止你做相反的事：到处读，没处写。不过你在 C 或 C++ 里还是可以这样做的。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>关闭谷歌浏览器更新 Mac</title>
        <link>https://gorpeln.top/article/16621400624</link>
        <guid isPermaLink="true">https://gorpeln.top/article/16621400624</guid>
        <pubDate>2022-09-03</pubDate>
        <description>&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20220903013422271.png!gorpeln&quot; alt=&quot;20220903013422271&quot; /&gt;&lt;/p&gt;

&lt;p&gt;终端中输入命令：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /Library/Google/GoogleSoftwareUpdate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20220903013422272.png!gorpeln&quot; alt=&quot;20220903013422272&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上面的目录如果不存在，执行下面的命令&lt;br /&gt;
修改文件夹GoogleSoftwareUpdate的拥有者，阻止谷歌对其的写入权限      &lt;br /&gt;
终端中输入命令：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Library/Google 
sudo chown root:wheel GoogleSoftwareUpdate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20220903013422273.png!gorpeln&quot; alt=&quot;20220903013422273&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.gorpeln.top/blog/20220903013422274.png!gorpeln&quot; alt=&quot;20220903013422274&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设置后还是有更新的标志，卸载谷歌浏览器，下载了最新的谷歌浏览器重新安装。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;恢复操作恢复谷歌浏览器自动更新设置，终端中输入命令：&lt;br /&gt;
// 恢复文件夹的拥有者是本人，恢复文件夹的写入权限&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown [自己电脑的管理员名称-admin]:wheel GoogleSoftwareUpdate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;// 例如 电脑管理员名称是 adminaa&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown adminaa:wheel GoogleSoftwareUpdate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
      </item>
    
  </channel>
</rss>